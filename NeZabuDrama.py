#!/usr/bin/env python
# coding: utf-8

# In[ ]:

# –ò–ú–ü–û–†–¢–´
# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import logging
import os
import signal
import sys
import time
import traceback
from functools import partial
import asyncio
import re
import unicodedata
import requests
from datetime import datetime

# –í–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import aiosqlite
import nest_asyncio
import urllib.parse 

# Telegram API –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import telegram
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    Bot
)
from telegram.error import BadRequest
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    CallbackContext,
    filters,
    JobQueue
)
from telegram.constants import ParseMode

# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)


# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê –ò –ë–î
DB_PATH = 'doramas.db'
DB_PATH_2 = 'doramas_users.db'
from config import TOKEN, ADMINS

# ======== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ==========
COUNTRIES = ["–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è", "–ö–∏—Ç–∞–π", "–Ø–ø–æ–Ω–∏—è"]
COUNTRY_FLAGS = {
    "–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è": "üá∞üá∑",
    "–ö–∏—Ç–∞–π": "üá®üá≥",
    "–Ø–ø–æ–Ω–∏—è": "üáØüáµ",
}
PAGE_SIZE = 10
DEFAULT_MESSAGE = "üòî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è."
ACTION_TYPE_COMMAND = "command"
ACTION_TYPE_MESSAGE = "message"
ACTION_TYPE_CALLBACK = "callback"
# ======== –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler ==========
(
    ADDING_TITLE_RU,
    ADDING_TITLE_EN,
    ADDING_COUNTRY,
    ADDING_YEAR,
    ADDING_DIRECTOR,
    ADDING_LEAD_ACTRESS,
    ADDING_LEAD_ACTOR,
    ADDING_PERSONAL_RATING,
    ADDING_COMMENT,
    ADDING_PLOT,
    ADDING_POSTER_URL, 
    DELETING_DORAMA,
    GETTING_DORAMA_ID,
    LIST_DORAMAS_RATING,
    SEARCH_COUNTRY,
    SEARCH_TITLE,
    HANDLE_PAGINATION,
    SEARCH_ACTOR,
    CHOOSE_ACTOR,   
    SEARCH_ACTRESS,     
    CHOOSE_ACTRESS,      
    SEARCH_DIRECTOR, 
    CHOOSE_DIRECTOR,
    SHOW_MENU,
    PAGE
) = range(25)

# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò

# ======== –†–∞–∑–¥–µ–ª—è–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ==========
def split_message(message: str, max_length=4096):
    return [message[i:i + max_length] for i in range(0, len(message), max_length)]

# ======== –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç (–¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –ø–æ–∏—Å–∫–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é) ==========
def truncate_text(text, max_length=10):
    if len(text) > max_length:
        return text[:max_length] + "..."
    return text

# ======== –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã ==========
def prevent_hashtag_linking(text: str) -> str:
    return text.replace("#", "#\u200b")

def escape_markdown(text: str) -> str:
    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    escape_chars = "*[]()~`>#+-=|{}.!"
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–π—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    for char in escape_chars:
        text = text.replace(char, "\\" + char)
    return text

def escape_markdown_v2(text: str) -> str:
    escape_chars = r"_*[]()~`>#+-=|{}.!"
    return "".join("\\" + char if char in escape_chars else char for char in text)

def remove_extra_escape(text: str) -> str:
    # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    chars_to_unescape = ".!~\-"
    
    # –£–¥–∞–ª–∏—Ç–µ –ª–∏—à–Ω–∏–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    for char in chars_to_unescape:
        text = text.replace("\\" + char, char)
    
    return text

# ======== –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ==========
def create_keyboard(buttons: list[list[InlineKeyboardButton]], resize=True) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

# ======== –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ callback_data ==========
def create_button(text: str, callback_data: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton(text, callback_data=callback_data)]])

# ======== –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ==========
def create_main_menu_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Ä–∞–º üìö", callback_data="list_doramas_menu")],           
        [InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–∞–Ω–µ üåç", callback_data="search_by_country")],    
        [InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –∞–∫—Ç–µ—Ä—É ü§¥üèª", callback_data="search_by_actor")],
        [InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –∞–∫—Ç—Ä–∏—Å–µ üë∏üèª", callback_data="search_by_actress")],
        [InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ —Ä–µ–∂–∏—Å—Å–µ—Ä—É üé¨", callback_data="search_by_director")],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å (–ö–∞—Ç—è)", callback_data="add_dorama"),
         InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å (–ö–∞—Ç—è)", callback_data="delete_dorama")],
        [InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="show_menu")]
    ]

    return InlineKeyboardMarkup(keyboard)

# ======== –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω–∞ ==========
def create_cancel_keyboard() -> InlineKeyboardMarkup:
    return create_button("–û—Ç–º–µ–Ω–∞", "cancel")

# ======== –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ ==========
back_button = InlineKeyboardMarkup([
    [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="show_menu")]
])

# ======== –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" ==========
def return_to_main_menu() -> InlineKeyboardMarkup:
    return create_button("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", "show_menu")


# ======== –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–æ —Å—Ç—Ä–∞–Ω–∞–º ==========
def create_country_buttons():
    return [
        [InlineKeyboardButton(f"{COUNTRY_FLAGS.get(country, '')} {country}", callback_data=f"select_country:{country}")]
        for country in COUNTRIES
    ]

# –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•  
# ======== –°–æ–∑–¥–∞–µ–º –ë–î –∏ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ ==========
async def init_db():
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            await db.execute('''
                CREATE TABLE IF NOT EXISTS doramas (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    title_ru TEXT NOT NULL,
                    title_en TEXT NOT NULL,
                    country TEXT NOT NULL,
                    year INTEGER NOT NULL,
                    director TEXT NOT NULL,
                    lead_actress TEXT NOT NULL,
                    lead_actor TEXT NOT NULL,
                    personal_rating INTEGER NOT NULL,
                    comment TEXT NOT NULL,
                    plot TEXT NOT NULL,
                    poster_url TEXT
                )
            ''')

            # –°–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
            indexes = [
                ('idx_title_ru', 'title_ru'),
                ('idx_title_en', 'title_en'),
                ('idx_country', 'country'),
                ('idx_lead_actor', 'lead_actor'),
                ('idx_lead_actress', 'lead_actress'),
                ('idx_director', 'director'),
            ]

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            for index_name, column_name in indexes:
                await db.execute(f'CREATE INDEX IF NOT EXISTS {index_name} ON doramas ({column_name})')
            
            await db.commit()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except aiosqlite.Error as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        sys.exit(1)

# ======== –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Ä–∞–º ==========
async def get_total_doramas_count():
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            async with db.execute('SELECT COUNT(*) FROM doramas') as cursor:
                count = await cursor.fetchone()
                return count[0] if count else 0
    except aiosqlite.Error as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Ä–∞–º: {e}")
        return 0
    
# ======== –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Å—ã–ª–∫—É –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –≤ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É ==========    
def get_yandex_disk_direct_link(yandex_url):
    try:
        base_api_url = "https://cloud-api.yandex.net/v1/disk/public/resources/download"
        response = requests.get(base_api_url, params={"public_key": yandex_url})

        if response.status_code == 200:
            return response.json().get("href", "")
        else:
            return ""
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏: {e}")
        return ""

# ======== –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ==========    
async def send_reply(update: Update, text: str):
    if update.message:
        await update.message.reply_text(text)
    elif update.callback_query:
        await update.callback_query.message.reply_text(text)
    else:
        logger.warning("–ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø update.")

# –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê
# ======== –ü—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç ==========
def get_start_menu() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞—á–∞—Ç—å'."""
    keyboard = [[InlineKeyboardButton("–ù–∞—á–∞—Ç—å", callback_data="show_menu")]]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, –ª–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é."""
    try:
        user = update.effective_user
        if not user:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ update.")
            return

        user_id = user.id
        username = user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # –¢–µ–∫—É—â–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
        async with aiosqlite.connect(DB_PATH_2) as db:
            await db.execute('''
                INSERT INTO users (user_id, username, first_seen, last_seen)
                VALUES (?, ?, ?, ?)
                ON CONFLICT(user_id) DO UPDATE SET
                    username = excluded.username,
                    last_seen = excluded.last_seen;
            ''', (user_id, username, now, now))

            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ update_last_actions
            message_id = update.message.message_id if update.message else None
            await update_last_actions(db, user_id, "command", "/start", message_id, None, now)
            await db.commit()

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Ä–∞–º
        total_doramas = await get_total_doramas_count()
        reply_markup = get_start_menu()

        welcome_text = (
            "üëã *–ü—Ä–∏–≤–µ—Ç!*\n–Ø —Å–µ—Ä–∏–∞–ª—å–Ω—ã–π –±–æ—Ç üå∏*–ù–µ–ó–∞–±—É–¥—Ä–∞–º–∞!*üå∏\n\n"
            "–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–±–∏—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é \n–æ –¥–æ—Ä–∞–º–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ö–∞—Ç—è —É–∂–µ —É—Å–ø–µ–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å. üìö \n\n"
            f"–°–µ–π—á–∞—Å –≤ –º–æ–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ *{total_doramas}* –¥–æ—Ä–∞–º!\nüìñ (–ò –º—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –µ—ë –ø–æ–ø–æ–ª–Ω—è—Ç—å!)\n\n"
            "–ù–∞–∂–º–∏ ¬´–ù–∞—á–∞—Ç—å¬ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å,\n—á—Ç–æ —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–∫–∞–∑–∞—Ç—å! ‚ú®"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message:
            await update.message.reply_text(
                welcome_text, reply_markup=reply_markup, parse_mode='Markdown'
            )
        elif update.callback_query:
            query = update.callback_query
            await query.answer()
            await query.edit_message_text(
                welcome_text, reply_markup=reply_markup, parse_mode='Markdown'
            )
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")

        return SHOW_MENU

    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {e}", exc_info=True)

        if update.message:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start.")
        elif update.callback_query:
            await update.callback_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start.")
        elif update.effective_chat:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: update.effective_chat –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

# ========  –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ==========
async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info("–§—É–Ω–∫—Ü–∏—è show_menu –≤—ã–∑–≤–∞–Ω–∞!")  
    query = update.callback_query
    reply_markup = create_main_menu_keyboard()


    try:
        if query:
            await query.answer()
            try:
                await query.message.delete() # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}", exc_info=True)

            await context.bot.send_message( # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                chat_id=query.message.chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )    
        elif update.message:
            await update.message.reply_text(
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ show_menu: {update}", exc_info=True) # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

            chat_id = None # –ü–æ–ª—É—á–∞–µ–º chat_id
            if update.effective_chat:
                chat_id = update.effective_chat.id
            elif update.message:
                chat_id = update.message.chat_id
            elif update.callback_query:
                chat_id = update.callback_query.message.chat_id

            if chat_id:
                await context.bot.send_message(chat_id=chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=reply_markup)
            else:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id.")
            return SHOW_MENU

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}", exc_info=True)

        chat_id = None  # –ü–æ–ª—É—á–∞–µ–º chat_id
        if update.message:
            chat_id = update.message.chat_id
        elif update.callback_query:
            chat_id = update.callback_query.message.chat_id
        elif update.effective_chat:
            chat_id = update.effective_chat.id

        if chat_id:
            await context.bot.send_message(chat_id=chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
                reply_markup=reply_markup)
        else:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id.")

    return SHOW_MENU
        

# ========   –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" ==========
async def handle_back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    context.user_data.clear()

    logger.info("–ü—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ —Å–±—Ä–æ—à–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    
    reply_markup = create_main_menu_keyboard()

    try:
        try:

            await query.edit_message_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)

        except telegram.error.BadRequest as e:

            if 'Message is not modified' not in str(e):

                raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
                     
    return ConversationHandler.END

# –§–£–ù–ö–¶–ò–Ø –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê –ë–û–¢–ê
# ======== –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ==========
async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    logger.info("–ü—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω—ã.")
    
    reply_markup = create_main_menu_keyboard()
    
    await update.message.reply_text("üîÑ *–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.* \n\nüå∏–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup, parse_mode='Markdown')

    return SHOW_MENU

# –§–£–ù–ö–¶–ò–Ø –û–¢–ú–ï–ù–´
# ======== –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ==========
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    reply_markup = create_main_menu_keyboard()

    try:
        if query:
            await query.answer()
            try:

                await query.edit_message_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

            except telegram.error.BadRequest as e:

                if 'Message is not modified' not in str(e):

                    raise

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            if query.message:
                await query.message.reply_text(
                    "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", 
                    reply_markup=reply_markup
                )

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
                await asyncio.sleep(1)

                try:
                    await query.message.delete()
                except Exception as delete_error:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {delete_error}")

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        context.user_data.clear()  

        return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}", exc_info=True)
        return ConversationHandler.END


# –î–û–ë–ê–í–õ–ï–ù–ò–ï –î–û–†–ê–ú–´
def get_main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üå∏ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main_menu")],
    ])

# ======== –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ ==========
def create_rating_keyboard():
    keyboard = []
    row = []
    for i in range(1, 11):
        row.append(InlineKeyboardButton(str(i), callback_data=f"rating:{i}"))
        if i % 5 == 0:  # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 5 –∫–Ω–æ–ø–æ–∫
            keyboard.append(row)
            row = []
    if row:  # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∞—Å—å –Ω–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(keyboard)

# ======== –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ==========
async def add_dorama(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = None
    
    reply_markup = create_main_menu_keyboard()

    if update.message:
        user_id = update.message.from_user.id
    elif update.callback_query:
        user_id = update.callback_query.from_user.id
        await update.callback_query.answer()  # –û—Ç–≤–µ—Ç –Ω–∞ callback query
    else:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ message –∏ callback_query")
        return ConversationHandler.END

    if user_id not in ADMINS:
        if update.message:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ä–∞–º.",
                reply_markup=reply_markup)
        elif update.callback_query:
            await update.callback_query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ä–∞–º.",
                reply_markup=reply_markup)
        return ConversationHandler.END

    reply_markup = create_cancel_keyboard()

    if update.message:
        await update.message.reply_text("üá∑üá∫ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Ä–∞–º—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.edit_message_text("üá∑üá∫ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Ä–∞–º—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:", reply_markup=reply_markup)

    return ADDING_TITLE_RU

# –®–∞–≥ 1: –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
async def receive_title_ru(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.text:
        title_ru = update.message.text.strip()
    elif update.callback_query and update.callback_query.data:
        title_ru = update.callback_query.data.strip()
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Ä–∞–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ADDING_TITLE_RU

    if not title_ru:
        await update.message.reply_text("üí°–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ADDING_TITLE_RU
    
    context.user_data['title_ru'] = title_ru

    reply_markup = create_cancel_keyboard()
    
    await update.message.reply_text("üá¨üáß –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Ä–∞–º—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ:", reply_markup=reply_markup)
    return ADDING_TITLE_EN

# –®–∞–≥ 2: –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
async def receive_title_en(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.text:
        title_en = update.message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    elif update.callback_query and update.callback_query.data:
        title_en = update.callback_query.data.strip()  # –î–ª—è –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ –≤–¥—Ä—É–≥.
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Ä–∞–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ADDING_TITLE_EN
        
    if not title_en:
        await update.message.reply_text("üí°–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ADDING_TITLE_EN
    
    context.user_data['title_en'] = title_en

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
    reply_markup = InlineKeyboardMarkup(create_country_buttons())
    await update.message.reply_text("üåè –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –¥–æ—Ä–∞–º—ã:", reply_markup=reply_markup)
    return ADDING_COUNTRY

# –®–∞–≥ 3: –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (—Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞)
# ======== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Ä–∞–º—ã ========
async def receive_country_for_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    country_data = update.callback_query.data
    if not country_data.startswith("select_country:"):
        await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return ADDING_COUNTRY

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–∞–Ω—É –∏–∑ callback_data
    country = country_data.replace("select_country:", "").strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
    if country not in COUNTRIES:
        await update.callback_query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ADDING_COUNTRY

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['country'] = country

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    reply_markup = create_cancel_keyboard()
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç—Ä–∞–Ω—É: {COUNTRY_FLAGS.get(country, '')} {country}\nüìÖ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã—Ö–æ–¥–∞ –¥–æ—Ä–∞–º—ã:",
        reply_markup=reply_markup  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    )
    return ADDING_YEAR

# –®–∞–≥ 4: –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞
async def receive_year(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.text:
        year_str = update.message.text.strip()
    elif update.callback_query and update.callback_query.data:
        year_str = update.callback_query.data.strip()
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ADDING_YEAR
        
    if not year_str.isdigit():
        await update.message.reply_text("üìÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Ü–∏—Ñ—Ä–∞–º–∏.")
        return ADDING_YEAR
        
    year = int(year_str)
    if not (1900 <= year <= 2100):
        await update.message.reply_text("üìÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (1900-2100).")
        return ADDING_YEAR

    context.user_data['year'] = year

    reply_markup = create_cancel_keyboard()

    await update.message.reply_text("üé¨ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–∂–∏—Å—Å–µ—Ä–∞:", reply_markup=reply_markup)
    return ADDING_DIRECTOR

# –®–∞–≥ 5: –ò–º—è —Ä–µ–∂–∏—Å—Å–µ—Ä–∞
async def receive_director(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—à–µ–ª —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    if update.message and update.message.text:
        director = update.message.text.strip()
    elif update.callback_query and update.callback_query.data:
        director = update.callback_query.data.strip()
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è —Ä–µ–∂–∏—Å—Å–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ADDING_DIRECTOR

    if not director:
        await update.message.reply_text("üí°–ò–º—è —Ä–µ–∂–∏—Å—Å–µ—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ADDING_DIRECTOR
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏—Å—Å–µ—Ä–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['director'] = director
    
    reply_markup = create_cancel_keyboard()
    
    await update.message.reply_text("üë∏üèª –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–∫—Ç—Ä–∏—Å—ã:", reply_markup=reply_markup)
    return ADDING_LEAD_ACTRESS

# –®–∞–≥ 6: –ò–º—è –∞–∫—Ç—Ä–∏—Å—ã
async def receive_lead_actress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—à–µ–ª —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    if update.message and update.message.text:
        lead_actress = update.message.text.strip()
    elif update.callback_query and update.callback_query.data:
        lead_actress = update.callback_query.data.strip()
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –∞–∫—Ç—Ä–∏—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ADDING_LEAD_ACTRESS
        
    if not lead_actress:
        await update.message.reply_text("üí°–ò–º—è –∞–∫—Ç—Ä–∏—Å—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ADDING_LEAD_ACTRESS
        
    context.user_data['lead_actress'] = lead_actress
    
    reply_markup = create_cancel_keyboard()
    
    await update.message.reply_text("ü§¥üèª –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–∫—Ç–µ—Ä–∞:", reply_markup=reply_markup)
    return ADDING_LEAD_ACTOR

# –®–∞–≥ 7: –ò–º—è –∞–∫—Ç—ë—Ä–∞
async def receive_lead_actor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—à–µ–ª —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    if update.message and update.message.text:
        lead_actor = update.message.text.strip()
    elif update.callback_query and update.callback_query.data:
        lead_actor = update.callback_query.data.strip()
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –∞–∫—Ç–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ADDING_LEAD_ACTOR
    
    if not lead_actor:
        await update.message.reply_text("üí°–ò–º—è –∞–∫—Ç–µ—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ADDING_LEAD_ACTOR
    
    context.user_data['lead_actor'] = lead_actor
    
    reply_markup = create_cancel_keyboard()
    
    await update.message.reply_text("üéûÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—é–∂–µ—Ç –¥–æ—Ä–∞–º—ã:", reply_markup=reply_markup)
    return ADDING_PLOT

# –®–∞–≥ 8: –°—é–∂–µ—Ç –¥–æ—Ä–∞–º—ã
async def receive_plot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—à–µ–ª —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    if update.message and update.message.text:
        plot = update.message.text.strip()
    elif update.callback_query and update.callback_query.data:
        plot = update.callback_query.data.strip()
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—é–∂–µ—Ç –¥–æ—Ä–∞–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ADDING_PLOT
        
    if not plot:
        await update.message.reply_text("üí°–°—é–∂–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ADDING_PLOT
        
    context.user_data['plot'] = plot
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ü–µ–Ω–∫–∞–º–∏
    reply_markup = create_rating_keyboard()
    await update.message.reply_text("‚≠ê –û—Ü–µ–Ω–∫–∞ –¥–æ—Ä–∞–º—ã (–æ—Ç 1 –¥–æ 10):", reply_markup=reply_markup)
    return ADDING_PERSONAL_RATING

# –®–∞–≥ 9: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–∏—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
async def receive_personal_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("rating:"):
        personal_rating = int(query.data.split(":")[1])

        if 1 <= personal_rating <= 10:
            context.user_data['personal_rating'] = personal_rating
            reply_markup = create_cancel_keyboard()
            try:

                await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Ü–µ–Ω–∫—É: {personal_rating}\nüí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –¥–æ—Ä–∞–º–µ:", reply_markup=reply_markup)

            except telegram.error.BadRequest as e:

                if 'Message is not modified' not in str(e):

                    raise
            return ADDING_COMMENT
        else:
            try:

                await query.edit_message_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 10.")

            except telegram.error.BadRequest as e:

                if 'Message is not modified' not in str(e):

                    raise
            return ADDING_PERSONAL_RATING
    else:
        try:

            await query.edit_message_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")

        except telegram.error.BadRequest as e:

            if 'Message is not modified' not in str(e):

                raise
        return ADDING_PERSONAL_RATING

    context.user_data['personal_rating'] = personal_rating
    
    reply_markup = create_cancel_keyboard()
    
    await update.message.reply_text("üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –¥–æ—Ä–∞–º–µ:", reply_markup=reply_markup)
    return ADDING_COMMENT

# –®–∞–≥ 10: –õ–∏—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
async def receive_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    comment = update.message.text.strip() if update.message and update.message.text else None

    if not comment:
        await update.message.reply_text("üí°–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ADDING_COMMENT

    context.user_data['comment'] = comment

    await update.message.reply_text("üì∑ –í–≤–µ–¥–∏—Ç–µ URL –ø–æ—Å—Ç–µ—Ä–∞ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞:")
    return ADDING_POSTER_URL

# –®–∞–≥ 11: –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–µ—Ä
async def receive_poster_url(update: Update, context: ContextTypes.DEFAULT_TYPE):
    poster_url = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
    if not poster_url.startswith("https://disk.yandex.ru/"):
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π URL! –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞.")
        return ADDING_POSTER_URL
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Å—ã–ª–∫—É –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –≤ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
    direct_link = get_yandex_disk_direct_link(poster_url)
    if not direct_link:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç–µ—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.")
        return ADDING_POSTER_URL

    context.user_data['poster_url'] = direct_link  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É

    try:
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute(
                '''
                INSERT INTO doramas (title_ru, title_en, country, year, director, lead_actress, lead_actor, personal_rating, comment, plot, poster_url)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''',
                (
                    context.user_data['title_ru'],
                    context.user_data['title_en'],
                    context.user_data['country'],
                    context.user_data['year'],
                    context.user_data['director'],
                    context.user_data['lead_actress'],
                    context.user_data['lead_actor'],
                    context.user_data['personal_rating'],
                    context.user_data['comment'],
                    context.user_data['plot'],
                    context.user_data['poster_url'],  
                ),
            )
            await db.commit()

        await update.message.reply_text("üéâ –î–æ—Ä–∞–º–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        # –û—á–∏—â–∞–µ–º user_data –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        context.user_data.clear()  # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ

        return ConversationHandler.END  

    except aiosqlite.Error as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Ä–∞–º—ã –≤ –ë–î: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Ä–∞–º—ã –≤ –ë–î: {e}")
        return ADDING_POSTER_URL # –ò–ª–∏ ConversationHandler.END, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∂–µ–ª–∞–µ–º–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return ADDING_POSTER_URL # –ò–ª–∏ ConversationHandler.END, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∂–µ–ª–∞–µ–º–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        
# –§–£–ù–ö–¶–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø –î–û–†–ê–ú–´
# -- –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Ä–∞–º—ã
async def delete_dorama(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    if user_id not in ADMINS:
        try:

            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Ä–∞–º.")

        except telegram.error.BadRequest as e:

            if 'Message is not modified' not in str(e):

                raise
        return ConversationHandler.END

    keyboard = [
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–í–≤–µ–¥–∏—Ç–µ ID –¥–æ—Ä–∞–º—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
                                   reply_markup=reply_markup)
    
    return DELETING_DORAMA 

# -- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –¥–æ—Ä–∞–º—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
async def handle_delete_dorama(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    dorama_id = update.message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–æ—Ä–∞–º—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['dorama_id_to_delete'] = dorama_id

    keyboard = [
        [InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete")],
        [InlineKeyboardButton("–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–æ—Ä–∞–º—É —Å ID {dorama_id}?", reply_markup=reply_markup)
    
    return DELETING_DORAMA

# --–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Ä–∞–º—ã –∏ —É–¥–∞–ª—è–µ—Ç –µ–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
async def confirm_delete_dorama(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == "confirm_delete":
        dorama_id = context.user_data.get('dorama_id_to_delete')
        if not dorama_id:
            try:

                await query.edit_message_text("ID –¥–æ—Ä–∞–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="return_to_main_menu")]]))

            except telegram.error.BadRequest as e:

                if 'Message is not modified' not in str(e):

                    raise                         
            return ConversationHandler.END

        try:
            dorama_id_int = int(dorama_id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        except ValueError:
            try:

                await query.edit_message_text("‚ö†Ô∏è ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="return_to_main_menu")]]))

            except telegram.error.BadRequest as e:

                if 'Message is not modified' not in str(e):

                    raise
            return ConversationHandler.END

        try:
            async with aiosqlite.connect(DB_PATH) as db:
                await db.execute('DELETE FROM doramas WHERE id = ?', (dorama_id_int,))  
                await db.commit()
            try:

                await query.edit_message_text(f"–î–æ—Ä–∞–º–∞ —Å ID {dorama_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="return_to_main_menu")]]))

            except telegram.error.BadRequest as e:

                if 'Message is not modified' not in str(e):

                    raise
        except aiosqlite.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ—Ä–∞–º—ã: {e}")
            try:

                await query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ—Ä–∞–º—ã: {e}", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="return_to_main_menu")]]))

            except telegram.error.BadRequest as e:

                if 'Message is not modified' not in str(e):

                    raise
    else:
        try:

            await query.edit_message_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="return_to_main_menu")]]))

        except telegram.error.BadRequest as e:

            if 'Message is not modified' not in str(e):

                raise

    return ConversationHandler.END

# –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –î–û–†–ê–ú–ï –ü–û ID
async def get_dorama_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    reply_markup = create_cancel_keyboard()
    
    try:
        try:

            await query.edit_message_text("*üîé –í–≤–µ–¥–∏—Ç–µ ID –¥–æ—Ä–∞–º—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:*", reply_markup=reply_markup, parse_mode='Markdown')

        except telegram.error.BadRequest as e:

            if 'Message is not modified' not in str(e):

                raise
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ ID –¥–æ—Ä–∞–º—ã: {e}", exc_info=True)
        
    return GETTING_DORAMA_ID

# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
def safe_get(value):
    logger.debug(f"Value received in safe_get: {value} (type: {type(value)})")
    if value is None:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    if isinstance(value, str):
        escaped_text = escape_markdown(prevent_hashtag_linking(value))
        return remove_extra_escape(escaped_text)
    return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Ä–∞–º–µ.
async def get_dorama_details_text(row: aiosqlite.Row) -> str:
    title_ru = safe_get(row['title_ru'])
    title_en = safe_get(row['title_en'])
    plot = safe_get(row['plot'])  
    comment = safe_get(row['comment'])  

    return (
        f"*üá∑üá∫ {title_ru}*\n"
        f"*üá¨üáß {title_en}*\n\n"
        f"*üåè–°—Ç—Ä–∞–Ω–∞:* {safe_get(row['country'])}\n"
        f"*üìÖ–ì–æ–¥:* {safe_get(str(row['year']))}\n\n"
        f"*üé¨–†–µ–∂–∏—Å—Å–µ—Ä:* {safe_get(row['director'])}\n"
        f"*üë∏üèª–ì–ª–∞–≤–Ω–∞—è –∞–∫—Ç—Ä–∏—Å–∞:* {safe_get(row['lead_actress'])}\n"
        f"*ü§¥üèª–ì–ª–∞–≤–Ω—ã–π –∞–∫—Ç–µ—Ä:* {safe_get(row['lead_actor'])}\n\n"
        f"*üéûÔ∏è–°—é–∂–µ—Ç:* {plot}\n\n"  
        f"*‚≠ê–õ–∏—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:* {safe_get(str(row['personal_rating']))}\n"
        f"*üí¨–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {comment}\n"  
        f"*ID* {(row[0])}\n"
        
    )

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ).
async def _send_message(update: Update, text: str, photo: str = None, reply_markup: InlineKeyboardMarkup = None):
    try:
        if update.callback_query:
            if photo:
                await update.callback_query.message.reply_photo(photo=photo, caption=text, parse_mode="Markdown", reply_markup=reply_markup)
            else:
                await update.callback_query.message.reply_text(text, parse_mode="Markdown", reply_markup=reply_markup)
        elif update.message:
            if photo:
                await update.message.reply_photo(photo=photo, caption=text, parse_mode="Markdown", reply_markup=reply_markup)
            else:
                await update.message.reply_text(text, parse_mode="Markdown", reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Ä–∞–º–µ.
async def send_dorama_details(update: Update, row: aiosqlite.Row, context: ContextTypes.DEFAULT_TYPE):
    details = await get_dorama_details_text(row)
    poster_url = safe_get(row['poster_url'])  # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É

    if poster_url.startswith("https://disk.yandex.ru/"):
        poster_download_url = get_yandex_disk_direct_link(poster_url)
        await _send_message(update, details, photo=poster_download_url, reply_markup=back_button)
    else:
        await _send_message(update, details, reply_markup=back_button)



# –ü–æ–ª—É—á–∞–µ—Ç ID –¥–æ—Ä–∞–º—ã –∏ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
async def receive_dorama_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    dorama_id_str = update.message.text.strip()
    try:
        dorama_id = int(dorama_id_str)
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return GETTING_DORAMA_ID

    try:
        async with aiosqlite.connect(DB_PATH) as db:
            db.row_factory = aiosqlite.Row
            async with db.execute(
                """
                SELECT id, title_ru, title_en, country, year, director, lead_actress, lead_actor, personal_rating, comment, plot, poster_url
                FROM doramas WHERE id = ?
                """, 
                (dorama_id,)
            ) as cursor:
                row = await cursor.fetchone()

        if row is None:
            await update.message.reply_text(f"üö´ –î–æ—Ä–∞–º–∞ —Å ID {dorama_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return ConversationHandler.END


        await send_dorama_details(update, row, context)
        return ConversationHandler.END

    except aiosqlite.Error as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.", reply_markup=back_button)
        return ConversationHandler.END

                 
# –ü–û–ö–ê–ó–ê–¢–¨ –î–û–†–ê–ú–£ 
# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Ä–∞–º–µ –ø–æ ID.
async def handle_show_dorama(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    _, _, dorama_id = query.data.partition(":")
    if not dorama_id or not dorama_id.isdigit():
        await _send_message(update, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Ä–∞–º–µ.", reply_markup=back_button)
        return ConversationHandler.END

    try:
        start_time = asyncio.get_event_loop().time()
        async with aiosqlite.connect(DB_PATH) as db:
            db.row_factory = aiosqlite.Row
            async with db.execute(
                """
                SELECT id AS id,
                       title_ru AS title_ru,
                       title_en AS title_en,
                       country AS country,
                       year AS year,
                       director AS director,
                       lead_actress AS lead_actress,
                       lead_actor AS lead_actor,
                       personal_rating AS personal_rating,
                       comment AS comment,
                       plot AS plot,
                       poster_url AS poster_url
                FROM doramas WHERE id = ?
                """,
                (dorama_id,)
            ) as cursor:
                row = await cursor.fetchone()

        end_time = asyncio.get_event_loop().time()
        logger.info(f"SQL query execution time: {end_time - start_time:.4f} seconds")

        if row:
            await send_dorama_details(update, row, context)
        else:
            await _send_message(update, "üö´ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Ä–∞–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=back_button)

        return ConversationHandler.END

    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Ä–∞–º–µ: {e}", exc_info=True)
        await _send_message(update, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Ä–∞–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=back_button)
        return ConversationHandler.END


# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–ò–°–ö–ê –î–û–†–ê–ú–´ –ü–û –°–¢–†–ê–ù–ï (—Å –∫–Ω–æ–ø–æ—á–∫–∞–º–∏)
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–µ
async def search_by_country(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
    keyboard = create_country_buttons()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="return_to_main_menu")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞–Ω—ã
        try:

            await query.edit_message_text("*üö© –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–∏—Å–∫–∞:*", reply_markup=reply_markup, parse_mode='Markdown')

        except telegram.error.BadRequest as e:

            if 'Message is not modified' not in str(e):

                raise
    except BadRequest:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await update.message.reply_text("*üö© –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–∏—Å–∫–∞:*", reply_markup=reply_markup, parse_mode='Markdown')
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
                                        reply_markup=InlineKeyboardMarkup([
                                            [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_actor")],
                                            [InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="return_to_main_menu")]
                                        ])
        )
                                       
    return SEARCH_COUNTRY

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
async def handle_search_by_country(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    try:
        if query.data.startswith("select_country:"):
            country = query.data.split(":")[1]
            page = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}")
    except ValueError as ve:
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                                      reply_markup=InlineKeyboardMarkup([
                                          [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_country")],
                                          [InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="return_to_main_menu")]
                                      ])
        )
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω—É –≤ user_data
    context.user_data['country'] = country

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ—Ä–∞–º
    return await fetch_doramas_page(update, context, country, page)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ—Ä–∞–º –ø–æ —Å—Ç—Ä–∞–Ω–µ
async def fetch_doramas_page(update: Update, context: ContextTypes.DEFAULT_TYPE, country: str, page: int) -> int:
    query = update.callback_query

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with aiosqlite.connect(DB_PATH) as db:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Ä–∞–º –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
            async with db.execute('SELECT COUNT(*) FROM doramas WHERE country LIKE ?', (f"%{country}%",)) as cursor:
                total_results_country = (await cursor.fetchone())[0]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['total_results_country'] = total_results_country

            if total_results_country == 0:
                keyboard = [
                    [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_country")],
                    [InlineKeyboardButton("üå∏ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                try:

                    await query.edit_message_text(f"üö´ –î–æ—Ä–∞–º—ã –∏–∑ —Å—Ç—Ä–∞–Ω—ã '{country}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=reply_markup)

                except telegram.error.BadRequest as e:

                    if 'Message is not modified' not in str(e):

                        raise
                return ConversationHandler.END

            # –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            offset = page * PAGE_SIZE

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É)
            async with db.execute(
                'SELECT id, title_ru, year FROM doramas WHERE country LIKE ? ORDER BY title_ru ASC LIMIT ? OFFSET ?',
                (f"%{country}%", PAGE_SIZE, offset)
            ) as cursor:
                results = await cursor.fetchall()

            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –¥–æ—Ä–∞–º
            dorama_buttons = [
                [InlineKeyboardButton(f"üé¨ {title_ru} ({year})", callback_data=f"show_dorama:{dorama_id}")]
                for dorama_id, title_ru, year in results
            ]

            pagination_keyboard = create_pagination_buttons("country", page=page, total_results=total_results_country).inline_keyboard
            keyboard = dorama_buttons + list(pagination_keyboard)
            keyboard.append([InlineKeyboardButton("üå∏ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main_menu")])

            reply_markup = InlineKeyboardMarkup(keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await query.edit_message_text(
                f"*üö© –ù–∞–π–¥–µ–Ω–æ {total_results_country} –¥–æ—Ä–∞–º –∏–∑ —Å—Ç—Ä–∞–Ω—ã {country}:*\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {(total_results_country // PAGE_SIZE) + (1 if total_results_country % PAGE_SIZE else 0)}",
                reply_markup=reply_markup, parse_mode="Markdown"
            )

        return ConversationHandler.END

    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.id}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–æ—Ä–∞–º.",
                                      reply_markup=InlineKeyboardMarkup([
                                          [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_country")],
                                          [InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="return_to_main_menu")]
                                      ])
        )
        return ConversationHandler.END

# --- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ ---
def normalize_text(text):
    if not text:
        return ""
    
    text = text.strip()
    text = unicodedata.normalize("NFKC", text)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç
    text = re.sub(r"\s+", " ", text)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    return text.lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –±–µ–∑ –ª–∏—à–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã


# --- –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é ---
# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
async def start_search_by_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        if update.callback_query:  # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤
            query = update.callback_query
            await query.answer()
        else:  # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            query = None

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
        reply_markup = create_cancel_keyboard()

        # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Ä–∞–º—ã
        if query:
            await query.edit_message_text(
                "*üîé –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Ä–∞–º—ã –∏–ª–∏ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ:*", 
                reply_markup=reply_markup, 
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                "*üîé –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Ä–∞–º—ã –∏–ª–∏ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ:*", 
                reply_markup=reply_markup, 
                parse_mode='Markdown'
            )

        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞)
        context.user_data.clear()  # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–∞
        logger.info("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞
        context.user_data['search_type'] = 'title'
        return SEARCH_TITLE  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_search_by_title: {e}")
        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∏—Å–∫–∞.")
        elif update.message:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∏—Å–∫–∞.")
        return ConversationHandler.END

    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
async def handle_search_by_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        if update.message:
            title = update.message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            normalized_title = normalize_text(title)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏ –æ—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            logger.info(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {normalized_title}")  # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            context.user_data['normalized_title'] = normalized_title  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –≤–≤–æ–¥
            if not normalized_title:
                await update.message.reply_text(
                    "‚ö†Ô∏è –û—à–∏–±–∫–∞: –í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_title")],
                        [InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="return_to_main_menu")]
                    ])  
                )
                return SEARCH_TITLE  # –û–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            logger.info(f"–ò—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: {normalized_title}")
            return await fetch_doramas_by_title_page(update, context, normalized_title, 0)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_search_by_title: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
                                        reply_markup=InlineKeyboardMarkup([
                                        [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_title")],
                                        [InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="return_to_main_menu")]
                                       ])
        )
        return SEARCH_TITLE  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ—Ä–∞–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
async def fetch_doramas_by_title_page(update: Update, context: ContextTypes.DEFAULT_TYPE, normalized_title: str, page: int) -> int:
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page}, —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {normalized_title}")
    query = update.callback_query

    try:
        async with aiosqlite.connect(DB_PATH) as db:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Ä–∞–º –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
            async with db.execute(
                'SELECT COUNT(*) FROM doramas WHERE LOWER(title_ru) LIKE ? OR LOWER(title_en) LIKE ?', 
                (f"%{normalized_title}%", f"%{normalized_title}%")
            ) as cursor:
                total_results_title = (await cursor.fetchone())[0] or 0  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {total_results_title}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['total_results_title'] = total_results_title
            
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
            if total_results_title == 0:
                keyboard = [
                    [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_title")],
                    [InlineKeyboardButton("üå∏ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                if query:
                    try:

                        await query.edit_message_text(f"üö´ –î–æ—Ä–∞–º—ã —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{normalized_title}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=reply_markup)

                    except telegram.error.BadRequest as e:

                        if 'Message is not modified' not in str(e):

                            raise
                else:
                    await update.message.reply_text(f"üö´ –î–æ—Ä–∞–º—ã —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{normalized_title}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=reply_markup)

                return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥            
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            offset = page * PAGE_SIZE
            max_pages = (total_results_title + PAGE_SIZE - 1) // PAGE_SIZE              
            
            logger.info(f"SQL-–∑–∞–ø—Ä–æ—Å: SELECT id, title_ru, title_en FROM doramas WHERE LOWER(title_ru) LIKE '%{normalized_title}%' COLLATE NOCASE")

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É)
            async with db.execute(
                'SELECT id, title_ru, title_en, country, year FROM doramas '
                'WHERE LOWER(title_ru) LIKE LOWER(?) COLLATE NOCASE ' 
                'OR LOWER(title_en) LIKE LOWER(?) COLLATE NOCASE '
                'ORDER BY title_ru ASC LIMIT ? OFFSET ?',
                (f"%{normalized_title}%", f"%{normalized_title}%", PAGE_SIZE, offset)
            ) as cursor:
                results_title = await cursor.fetchall()
                      
            if not results_title:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–æ–≤—ã–π –ø–æ–∏—Å–∫" –∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
                keyboard = [
                    [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_title")],
                    [InlineKeyboardButton("üå∏ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        response = f"*üå∏ –ù–∞–π–¥–µ–Ω–æ {total_results_title} –¥–æ—Ä–∞–º –ø–æ –∑–∞–ø—Ä–æ—Å—É '{normalized_title}':*\n\n"
        response += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {max_pages}\n\n" # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–∞–Ω–∏—Ü

        keyboard = []
        seen_ids = set() # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–∏—Å–∫–∞
        is_russian_search = any(char in normalized_title for char in "–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è") 

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π –¥–æ—Ä–∞–º—ã
        for row in results_title:
            dorama_id, title_ru, title_en, country, _ = row
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞, –Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞
            if title_ru:
                normalized_title_ru = unicodedata.normalize("NFKC", title_ru)
                
            if dorama_id not in seen_ids: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç ID —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω
                seen_ids.add(dorama_id) # –î–æ–±–∞–≤–ª—è–µ–º ID –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ
                country_flag = COUNTRY_FLAGS.get(country, country)

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏–π
                truncated_title_ru = truncate_text(normalized_title_ru)
                truncated_title_en = truncate_text(title_en)    
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞ –ø–æ–∏—Å–∫–∞
                button_text = f"üé¨ {normalized_title_ru if is_russian_search else title_en} ({truncated_title_ru}) {country_flag}"
                # **–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ —Å–ø–∏—Å–æ–∫**
                button = InlineKeyboardButton(button_text, callback_data=f"show_dorama:{dorama_id}")
                keyboard.append([button])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–ø–∏—Å–æ–∫

                logger.info(f"dorama_id: {dorama_id}, title_ru: {normalized_title_ru}, title_en: {title_en}, button_text: {button_text}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        keyboard.extend(create_pagination_buttons("title", page, total_results_title).inline_keyboard)
        logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π: {keyboard}")
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        logger.info(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {response}")
        logger.info(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {reply_markup}")                
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if query:
            try:

                await query.edit_message_text(response, reply_markup=reply_markup, parse_mode="Markdown")

            except telegram.error.BadRequest as e:

                if 'Message is not modified' not in str(e):

                    raise
        elif update.message:
            await update.message.reply_text(response, reply_markup=reply_markup, parse_mode="Markdown")
        else:
            logger.error("–û—à–∏–±–∫–∞: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")
            return ConversationHandler.END  
        
        return HANDLE_PAGINATION  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        logger.exception(e)  

        error_message = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–æ—Ä–∞–º—ã."
        if query:
            try:

                await query.edit_message_text(error_message)

            except telegram.error.BadRequest as e:

                if 'Message is not modified' not in str(e):

                    raise
        elif update.message:
            await update.message.reply_text(error_message)

        return ConversationHandler.END  


# –§–£–ù–ö–¶–ò–Ø –ü–û–ò–°–ö–ê –ü–û –ê–ö–¢–Å–†–£
# –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–¥–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def create_actor_keyboard(actors, actor_names_with_flags, total_actors, page=0):
    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"choose_actor:{actor[0]}")]
        for actor, name in zip(actors, actor_names_with_flags)
    ]
    
    pagination_buttons = create_pagination_buttons("actor", page, total_actors)
    keyboard.extend(pagination_buttons.inline_keyboard)
    
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(keyboard)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –∞–∫—Ç–µ—Ä—É
async def search_by_actor(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        query = update.callback_query
        await query.answer()    
    
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ search_by_actor –≤—ã–∑–≤–∞–Ω!")
    
        reply_markup = create_cancel_keyboard()
    
        await query.edit_message_text(
            "*üîé –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –∞–∫—Ç—ë—Ä–∞ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:*", 
            reply_markup=reply_markup, 
            parse_mode='Markdown'
        )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –≤–≤–æ–¥–æ–º
        context.user_data.clear()  # –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø–æ–∏—Å–∫–æ–º    
        logger.info("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.")
    
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞
        context.user_data['search_type'] = 'actor'
        return SEARCH_ACTOR
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ search_by_title: {e}")
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∏—Å–∫–∞.", reply_markup=back_button)
        return ConversationHandler.END


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—ë—Ä–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Ä–∞–º
async def handle_search_by_actor(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message:
        actor_name = update.message.text.strip()
        logger.info(f"üîç handle_search_by_actor –≤—ã–∑–≤–∞–Ω! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª: {actor_name}")
        
        if not actor_name:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–∫—Ç—ë—Ä–∞.", 
                reply_markup=back_button
            )
            return SEARCH_ACTOR
        
        context.user_data['search_actor_name'] = actor_name
        
        try:
            actors = await fetch_actors_from_db(actor_name, 0)
            total_actors = await get_total_actors(actor_name)
            
            if actors:
                actor_names_with_flags = [
                    f"{actor[0]} {COUNTRY_FLAGS.get(actor[1], 'üåç')}"
                    for actor in actors
                ]
                
                keyboard = create_actor_keyboard(actors, actor_names_with_flags, total_actors)
                await update.message.reply_text(
                    "*‚ùî–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:*", 
                    reply_markup=keyboard, 
                    parse_mode='Markdown'
                )
                return CHOOSE_ACTOR
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∏–º—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –¥–æ—Ä–∞–º—ã
            actor_name_without_flags = re.sub(r'[^\w\s]', '', actor_name)
            await show_doramas_by_actor(update, context, actor_name_without_flags)
        
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}", exc_info=True)
            await update.message.reply_text(
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –î–µ—Ç–∞–ª–∏: {e}", 
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_actor")],
                    [InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="return_to_main_menu")]
                ])
            )
    
        return ConversationHandler.END

#  –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—ë—Ä–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –∞–∫—Ç—ë—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async def fetch_actors_from_db(actor_name: str, page: int) -> list:
    start_index = page * PAGE_SIZE
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT DISTINCT lead_actor, country FROM doramas WHERE lead_actor LIKE ? LIMIT ?, ?",
            (f"%{actor_name}%", start_index, PAGE_SIZE)
        ) as cursor:
            return await cursor.fetchall() 

# –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç—ë—Ä–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
async def get_total_actors(actor_name: str) -> int:
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT COUNT(DISTINCT lead_actor) FROM doramas WHERE lead_actor LIKE ?",
            (f"%{actor_name}%",)
        ) as cursor:
            return (await cursor.fetchone())[0]

async def show_actors_list(update: Update, context: ContextTypes.DEFAULT_TYPE, actor_name: str, page: int) -> int:
    try:
        start_index = page * PAGE_SIZE  # –ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–∫—Ç—ë—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        actors = await fetch_actors_from_db(actor_name, page)
        total_actors = await get_total_actors(actor_name)
        
        if actors:
            actor_names_with_flags = [
                f"{actor[0]} {COUNTRY_FLAGS.get(actor[1], 'üåç')}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º actor[1] –∫–∞–∫ —Å—Ç—Ä–∞–Ω—É
                for actor in actors
            ]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–∫—Ç—ë—Ä–æ–≤
            keyboard = create_actor_keyboard(actors, actor_names_with_flags, total_actors, page)
            
            response_text = f"–ê–∫—Ç—ë—Ä—ã –ø–æ –∏–º–µ–Ω–∏ '{actor_name}' (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}):"
            
            await update.callback_query.message.edit_text(response_text, reply_markup=keyboard, parse_mode='Markdown')
            return CHOOSE_ACTOR
        
        else:
            await update.callback_query.message.edit_text("–ê–∫—Ç—ë—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç—ë—Ä–æ–≤: {e}")
        await update.callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–∫—Ç—ë—Ä–æ–≤.")
    
    return CHOOSE_ACTOR        
        
# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç—ë—Ä–æ–≤
async def handle_choose_actor(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    _, _, actor_name = query.data.partition(":")
    if not actor_name:
        await query.message.reply_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è –∞–∫—Ç—ë—Ä–∞.", 
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_actor")],
                [InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="return_to_main_menu")]
            ])
        )
        return ConversationHandler.END

    # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ –∏–∑ –∏–º–µ–Ω–∏ –∞–∫—Ç—ë—Ä–∞
    actor_name_without_flags = re.sub(r'[^\w\s]', '', actor_name)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Ä–∞–º—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫—Ç—ë—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    return await show_doramas_by_actor(update, context, actor_name_without_flags)

# –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –¥–æ—Ä–∞–º –ø–æ –∞–∫—Ç—ë—Ä—É
async def show_doramas_by_actor(update: Update, context: ContextTypes.DEFAULT_TYPE, actor_name: str, page: int = 0) -> int:
    query = update.callback_query  
    start_index = page * PAGE_SIZE 
    
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            async with db.execute(
                "SELECT id, title_ru, country, year FROM doramas WHERE LOWER(lead_actor) LIKE LOWER(?) LIMIT ?, ?", 
                ('%' + actor_name.strip() + '%', start_index, PAGE_SIZE)
            ) as cursor:
                results = await cursor.fetchall()
                
            async with db.execute(
                "SELECT COUNT(*) FROM doramas WHERE LOWER(lead_actor) LIKE LOWER(?)", 
                ('%' + actor_name.strip() + '%',)
            ) as cursor:
                total_doramas = (await cursor.fetchone())[0]
                
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∞–∫—Ç—ë—Ä–∞ –∏ –æ–±—â–µ–µ —á–∏—Å–ª–æ –¥–æ—Ä–∞–º –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        context.user_data['search_actor_name'] = actor_name
        context.user_data['total_results_actor'] = total_doramas        
        if results:
            country = results[0][2]  # –ë–µ—Ä–µ–º —Å—Ç—Ä–∞–Ω—É –∏–∑ –ø–µ—Ä–≤–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π –¥–æ—Ä–∞–º—ã
            country_flag = COUNTRY_FLAGS.get(country, "üåç")
            total_pages = (total_doramas + PAGE_SIZE - 1) // PAGE_SIZE
            
            response = (
                f"ü§¥ –ê–∫—Ç—ë—Ä: *{actor_name}* {country_flag}\n"
                f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n"
                f"–í—Å–µ–≥–æ –¥–æ—Ä–∞–º: *{total_doramas}*\n\n"
            )
            
            keyboard = [[InlineKeyboardButton(f"üé¨ {row[1]} ({row[3]})", callback_data=f"show_dorama:{row[0]}")] for row in results]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            keyboard.extend(create_pagination_buttons("actor", page, total_doramas).inline_keyboard)

            keyboard.append([InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_actor")])
            keyboard.append([InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="return_to_main_menu")])

            reply_markup = InlineKeyboardMarkup(keyboard)

            if query and query.message:
                try:

                    await query.message.edit_text(text=response, reply_markup=reply_markup, parse_mode='Markdown')

                except telegram.error.BadRequest as e:

                    if 'Message is not modified' not in str(e):

                        raise
            else:
                await update.message.reply_text(text=response, reply_markup=reply_markup, parse_mode='Markdown')
               
        else:
            await query.message.edit_text(
                f"üö´ –î–æ—Ä–∞–º—ã —Å –∞–∫—Ç—ë—Ä–æ–º '{actor_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_actor")],
                    [InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="return_to_main_menu")]
                ])
            )                
        
        return ConversationHandler.END

    except Exception as e:
        logger.error(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–æ—Ä–∞–º –ø–æ –∞–∫—Ç—ë—Ä—É: {e}", 
            exc_info=True
        )
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–æ—Ä–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_actor")],
                [InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="return_to_main_menu")]
            ])
        )
        return ConversationHandler.END
        

# –§–£–ù–ö–¶–ò–Ø –ü–û–ò–°–ö–ê –ü–û –ê–ö–¢–†–ò–°–ï
# –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–¥–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def create_actress_keyboard(actress, actress_names_with_flags, total_actress, page=0):
    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"choose_actress:{actress[0]}")]
        for actress, name in zip(actress, actress_names_with_flags)
    ]
    
    pagination_buttons = create_pagination_buttons("actress", page, total_actress)
    keyboard.extend(pagination_buttons.inline_keyboard)
    
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(keyboard)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –∞–∫—Ç—Ä–∏—Å–µ
async def search_by_actress(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        query = update.callback_query
        await query.answer()    
    
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ search_by_actress –≤—ã–∑–≤–∞–Ω!")
    
        reply_markup = create_cancel_keyboard()
    
        await query.edit_message_text(
            "*üîé –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –∞–∫—Ç—Ä–∏—Å—ã —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:*", 
            reply_markup=reply_markup, 
            parse_mode='Markdown'
        )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –≤–≤–æ–¥–æ–º
        context.user_data.clear()  # –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø–æ–∏—Å–∫–æ–º    
        logger.info("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.")
    
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞
        context.user_data['search_type'] = 'actress'
        return SEARCH_ACTRESS
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ search_by_title: {e}")
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∏—Å–∫–∞.", 
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_actress")],
                [InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="return_to_main_menu")]
            ])
        )
        return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—Ä–∏—Å—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Ä–∞–º
async def handle_search_by_actress(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message:
        actress_name = update.message.text.strip()
        logger.info(f"üîç handle_search_by_actress –≤—ã–∑–≤–∞–Ω! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª: {actress_name}")
        
        if not actress_name:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–∫—Ç—Ä–∏—Å—ã.", 
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_actress")],
                    [InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="return_to_main_menu")]
                ])
            )
            return SEARCH_ACTRESS
        
        context.user_data['search_actress_name'] = actress_name
        
        try:
            actresses = await fetch_actresses_from_db(actress_name, 0)
            total_actresses = await get_total_actresses(actress_name)
            
            if actresses:
                actress_names_with_flags = [
                    f"{actress[0]} {COUNTRY_FLAGS.get(actress[1], 'üåç')}"
                    for actress in actresses
                ]
                
                keyboard = create_actress_keyboard(actresses, actress_names_with_flags, total_actresses)
                await update.message.reply_text(
                    "*‚ùî–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:*", 
                    reply_markup=keyboard, 
                    parse_mode='Markdown'
                )
                return CHOOSE_ACTRESS
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∏–º—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –¥–æ—Ä–∞–º—ã
            actress_name_without_flags = re.sub(r'[^\w\s]', '', actress_name)
            await show_doramas_by_actress(update, context, actress_name_without_flags)
        
        except Exception as e:
            logger.error(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}", 
                exc_info=True
            )
            await update.message.reply_text(
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –î–µ—Ç–∞–ª–∏: {e}", 
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_actress")],
                    [InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="return_to_main_menu")]
                ])
            )
    
    return ConversationHandler.END

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—Ä–∏—Å –ø–æ –∏–º–µ–Ω–∏ –∞–∫—Ç—Ä–∏—Å—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async def fetch_actresses_from_db(actress_name: str, page: int) -> list:
    start_index = page * PAGE_SIZE
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT DISTINCT lead_actress, country FROM doramas WHERE lead_actress LIKE ? LIMIT ?, ?",
            (f"%{actress_name}%", start_index, PAGE_SIZE)
        ) as cursor:
            return await cursor.fetchall() 

# –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç—Ä–∏—Å –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
async def get_total_actresses(actress_name: str) -> int:
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT COUNT(DISTINCT lead_actress) FROM doramas WHERE lead_actress LIKE ?",
            (f"%{actress_name}%",)
        ) as cursor:
            return (await cursor.fetchone())[0]

#  –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫—Ç—Ä–∏—Å —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async def show_actresses_list(update: Update, context: ContextTypes.DEFAULT_TYPE, actress_name: str, page: int) -> int:
    try:
        start_index = page * PAGE_SIZE  # –ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–∫—Ç—Ä–∏—Å —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        actresses = await fetch_actresses_from_db(actress_name, page)
        total_actresses = await get_total_actresses(actress_name)
        
        if actresses:
            actress_names_with_flags = [
                f"{actress[0]} {COUNTRY_FLAGS.get(actress[1], 'üåç')}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º actress[1] –∫–∞–∫ —Å—Ç—Ä–∞–Ω—É
                for actress in actresses
            ]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–∫—Ç—Ä–∏—Å
            keyboard = create_actress_keyboard(actresses, actress_names_with_flags, total_actresses, page)
            
            response_text = f"–ê–∫—Ç—Ä–∏—Å—ã –ø–æ –∏–º–µ–Ω–∏ '{actress_name}' (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}):"
            
            await update.callback_query.message.edit_text(response_text, reply_markup=keyboard, parse_mode='Markdown')
            return CHOOSE_ACTRESS
        
        else:
            await update.callback_query.message.edit_text("–ê–∫—Ç—Ä–∏—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç—Ä–∏—Å: {e}")
        await update.callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–∫—Ç—Ä–∏—Å.")
    
    return CHOOSE_ACTRESS

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç—Ä–∏—Å
async def handle_choose_actress(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    _, _, actress_name = query.data.partition(":")
    if not actress_name:
        await query.message.reply_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è –∞–∫—Ç—Ä–∏—Å—ã.", 
            reply_markup=back_button
        )
        return ConversationHandler.END

    # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ –∏–∑ –∏–º–µ–Ω–∏ –∞–∫—Ç—Ä–∏—Å—ã
    actress_name_without_flags = re.sub(r'[^\w\s]', '', actress_name)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Ä–∞–º—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞–∫—Ç—Ä–∏—Å—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    return await show_doramas_by_actress(update, context, actress_name_without_flags)

# –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Ä–∞–º –ø–æ –∞–∫—Ç—Ä–∏—Å–µ
async def show_doramas_by_actress(update: Update, context: ContextTypes.DEFAULT_TYPE, actress_name: str, page: int = 0) -> int:
    query = update.callback_query  
    start_index = page * PAGE_SIZE 
    
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            async with db.execute(
                "SELECT id, title_ru, country, year FROM doramas WHERE LOWER(lead_actress) LIKE LOWER(?) LIMIT ?, ?", 
                ('%' + actress_name.strip() + '%', start_index, PAGE_SIZE)
            ) as cursor:
                results = await cursor.fetchall()
                
            async with db.execute(
                "SELECT COUNT(*) FROM doramas WHERE LOWER(lead_actress) LIKE LOWER(?)", 
                ('%' + actress_name.strip() + '%',)
            ) as cursor:
                total_doramas = (await cursor.fetchone())[0]
                
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∞–∫—Ç—Ä–∏—Å—ã –∏ –æ–±—â–µ–µ —á–∏—Å–ª–æ –¥–æ—Ä–∞–º –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        context.user_data['search_actress_name'] = actress_name
        context.user_data['total_results_actress'] = total_doramas        
        
        if results:
            country = results[0][2]  # –ë–µ—Ä–µ–º —Å—Ç—Ä–∞–Ω—É –∏–∑ –ø–µ—Ä–≤–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π –¥–æ—Ä–∞–º—ã
            country_flag = COUNTRY_FLAGS.get(country, "üåç")
            total_pages = (total_doramas + PAGE_SIZE - 1) // PAGE_SIZE
            
            response = (
                f"ü§¥ –ê–∫—Ç—Ä–∏—Å–∞: *{actress_name}* {country_flag}\n"
                f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n"
                f"–í—Å–µ–≥–æ –¥–æ—Ä–∞–º: *{total_doramas}*\n\n"
            )
            
            keyboard = [[InlineKeyboardButton(f"üé¨ {row[1]} ({row[3]})", callback_data=f"show_dorama:{row[0]}")] for row in results]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            keyboard.extend(create_pagination_buttons("actress", page, total_doramas).inline_keyboard)

            keyboard.append([InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_actress")])
            keyboard.append([InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="return_to_main_menu")])

            reply_markup = InlineKeyboardMarkup(keyboard)

            if query and query.message:
                try:

                    await query.message.edit_text(text=response, reply_markup=reply_markup, parse_mode='Markdown')

                except telegram.error.BadRequest as e:

                    if 'Message is not modified' not in str(e):

                        raise
            else:
                await update.message.reply_text(text=response, reply_markup=reply_markup, parse_mode='Markdown')
               
        else:
            await query.message.edit_text(
                f"üö´ –î–æ—Ä–∞–º—ã —Å –∞–∫—Ç—Ä–∏—Å–æ–π '{actress_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_actress")],
                    [InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="return_to_main_menu")]
                ])
            )
                
        return ConversationHandler.END

    except Exception as e:
        logger.error(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–æ—Ä–∞–º –ø–æ –∞–∫—Ç—Ä–∏—Å–µ: {e}", 
            exc_info=True
        )
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–æ—Ä–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_button
        )
        return ConversationHandler.END

# –§–£–ù–ö–¶–ò–Ø –ü–û–ò–°–ö–ê –ü–û –†–ï–ñ–ò–°–°–Å–†–£
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–µ–∂–∏—Å—Å—ë—Ä–æ–≤
def create_director_keyboard(directors, director_names_with_flags, total_directors, page=0):
    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"choose_director:{director[0]}")]
        for director, name in zip(directors, director_names_with_flags)
    ]
    
    pagination_buttons = create_pagination_buttons("director", page, total_directors)
    keyboard.extend(pagination_buttons.inline_keyboard)
    
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(keyboard)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ä–µ–∂–∏—Å—Å—ë—Ä—É
async def search_by_director(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        query = update.callback_query
        await query.answer()    
    
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ search_by_director –≤—ã–∑–≤–∞–Ω!")
    
        reply_markup = create_cancel_keyboard()
    
        await query.edit_message_text(
            "*üîé –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é —Ä–µ–∂–∏—Å—Å—ë—Ä–∞ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:*", 
            reply_markup=reply_markup, 
            parse_mode='Markdown'
        )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –≤–≤–æ–¥–æ–º
        context.user_data.clear()  # –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø–æ–∏—Å–∫–æ–º    
        logger.info("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.")
    
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞
        context.user_data['search_type'] = 'director'
        return SEARCH_DIRECTOR
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ search_by_title: {e}")
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∏—Å–∫–∞.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_director")],
                [InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="return_to_main_menu")]
            ])
        )
        return ConversationHandler.END


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∏—Å–∫–∞ —Ä–µ–∂–∏—Å—Å—ë—Ä–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Ä–∞–º
async def handle_search_by_director(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message:
        director_name = update.message.text.strip()
        logger.info(f"üîç handle_search_by_director –≤—ã–∑–≤–∞–Ω! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª: {director_name}")
        
        if not director_name:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–∂–∏—Å—Å—ë—Ä–∞.", 
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_director")],
                    [InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="return_to_main_menu")]
                ])
            )
            return SEARCH_DIRECTOR
        
        context.user_data['search_director_name'] = director_name
        
        try:
            directors = await fetch_directors_from_db(director_name, 0)
            total_directors = await get_total_directors(director_name)
            
            if directors:
                director_names_with_flags = [
                    f"{director[0]} {COUNTRY_FLAGS.get(director[1], 'üåç')}"
                    for director in directors
                ]
                
                keyboard = create_director_keyboard(directors, director_names_with_flags, total_directors)
                await update.message.reply_text(
                    "*‚ùî–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:*", 
                    reply_markup=keyboard, 
                    parse_mode='Markdown'
                )
                return CHOOSE_DIRECTOR
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∏–º—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –¥–æ—Ä–∞–º—ã
            director_name_without_flags = re.sub(r'[^\w\s]', '', director_name)
            await show_doramas_by_director(update, context, director_name_without_flags)
        
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}", exc_info=True)
            await update.message.reply_text(
                f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –î–µ—Ç–∞–ª–∏: {e}", 
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_director")],
                    [InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="return_to_main_menu")]
                ])
            )
    
    return ConversationHandler.END

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∂–∏—Å—Å—ë—Ä–æ–≤ –ø–æ –∏–º–µ–Ω–∏ —Ä–µ–∂–∏—Å—Å—ë—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async def fetch_directors_from_db(director_name: str, page: int) -> list:
    start_index = page * PAGE_SIZE
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT DISTINCT director, country FROM doramas WHERE director LIKE ? LIMIT ?, ?",
            (f"%{director_name}%", start_index, PAGE_SIZE)
        ) as cursor:
            return await cursor.fetchall() 

# –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∂–∏—Å—Å—ë—Ä–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
async def get_total_directors(director_name: str) -> int:
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT COUNT(DISTINCT director) FROM doramas WHERE director LIKE ?",
            (f"%{director_name}%",)
        ) as cursor:
            return (await cursor.fetchone())[0]
        
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∂–∏—Å—Å—ë—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async def show_directors_list(update: Update, context: ContextTypes.DEFAULT_TYPE, director_name: str, page: int) -> int:
    try:
        start_index = page * PAGE_SIZE  # –ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∂–∏—Å—Å—ë—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        directors = await fetch_directors_from_db(director_name, page)
        total_directors = await get_total_directors(director_name)
        
        if directors:
            director_names_with_flags = [
                f"{director[0]} {COUNTRY_FLAGS.get(director[1], 'üåç')}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º director[1] –∫–∞–∫ —Å—Ç—Ä–∞–Ω—É
                for director in directors
            ]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∂–∏—Å—Å—ë—Ä–æ–≤
            keyboard = create_director_keyboard(directors, director_names_with_flags, total_directors, page)
            
            response_text = f"–†–µ–∂–∏—Å—Å—ë—Ä—ã –ø–æ –∏–º–µ–Ω–∏ '{director_name}' (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}):"
            
            await update.callback_query.message.edit_text(response_text, reply_markup=keyboard, parse_mode='Markdown')
            return CHOOSE_DIRECTOR
        
        else:
            await update.callback_query.message.edit_text("–†–µ–∂–∏—Å—Å—ë—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ–∂–∏—Å—Å—ë—Ä–æ–≤: {e}")
        await update.callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–∂–∏—Å—Å—ë—Ä–æ–≤.")
    
    return CHOOSE_DIRECTOR

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–µ–∂–∏—Å—Å—ë—Ä–æ–≤
async def handle_choose_director(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    _, _, director_name = query.data.partition(":")
    if not director_name:
        await query.message.reply_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è —Ä–µ–∂–∏—Å—Å—ë—Ä–∞.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_director")],
                [InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="return_to_main_menu")]
            ])
        )
        return ConversationHandler.END

    # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ –∏–∑ –∏–º–µ–Ω–∏ —Ä–µ–∂–∏—Å—Å—ë—Ä–∞
    director_name_without_flags = re.sub(r'[^\w\s]', '', director_name)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Ä–∞–º—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏—Å—Å—ë—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    return await show_doramas_by_director(update, context, director_name_without_flags)


# –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Ä–∞–º –ø–æ —Ä–µ–∂–∏—Å—Å—ë—Ä—É
async def show_doramas_by_director(update: Update, context: ContextTypes.DEFAULT_TYPE, director_name: str, page: int = 0) -> int:
    query = update.callback_query  
    start_index = page * PAGE_SIZE 
    
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            async with db.execute(
                "SELECT id, title_ru, country, year FROM doramas WHERE LOWER(director) LIKE LOWER(?) LIMIT ?, ?", 
                ('%' + director_name.strip() + '%', start_index, PAGE_SIZE)
            ) as cursor:
                results = await cursor.fetchall()
                
            async with db.execute(
                "SELECT COUNT(*) FROM doramas WHERE LOWER(director) LIKE LOWER(?)", 
                ('%' + director_name.strip() + '%',)
            ) as cursor:
                total_doramas = (await cursor.fetchone())[0]
                
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ä–µ–∂–∏—Å—Å—ë—Ä–∞ –∏ –æ–±—â–µ–µ —á–∏—Å–ª–æ –¥–æ—Ä–∞–º –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        context.user_data['search_director_name'] = director_name
        context.user_data['total_results_director'] = total_doramas        
        
        if results:
            country = results[0][2]  # –ë–µ—Ä–µ–º —Å—Ç—Ä–∞–Ω—É –∏–∑ –ø–µ—Ä–≤–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π –¥–æ—Ä–∞–º—ã
            country_flag = COUNTRY_FLAGS.get(country, "üåç")
            total_pages = (total_doramas + PAGE_SIZE - 1) // PAGE_SIZE
            
            response = (
                f"ü§¥ –†–µ–∂–∏—Å—Å—ë—Ä: *{director_name}* {country_flag}\n"
                f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n"
                f"–í—Å–µ–≥–æ –¥–æ—Ä–∞–º: *{total_doramas}*\n\n"
            )
            
            keyboard = [[InlineKeyboardButton(f"üé¨ {row[1]} ({row[3]})", callback_data=f"show_dorama:{row[0]}")] for row in results]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            keyboard.extend(create_pagination_buttons("director", page, total_doramas).inline_keyboard)

            keyboard.append([InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_director")])
            keyboard.append([InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="return_to_main_menu")])

            reply_markup = InlineKeyboardMarkup(keyboard)

            if query and query.message:
                try:

                    await query.message.edit_text(text=response, reply_markup=reply_markup, parse_mode='Markdown')

                except telegram.error.BadRequest as e:

                    if 'Message is not modified' not in str(e):

                        raise
            else:
                await update.message.reply_text(text=response, reply_markup=reply_markup, parse_mode='Markdown')
               
        else:
            await query.message.edit_text(
                f"üö´ –î–æ—Ä–∞–º—ã —Å —Ä–µ–∂–∏—Å—Å—ë—Ä–æ–º '{director_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_director")],
                    [InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="return_to_main_menu")]
                ])
            )
                
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–æ—Ä–∞–º –ø–æ —Ä–µ–∂–∏—Å—Å—ë—Ä—É: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–æ—Ä–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_director")],
                [InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå∏", callback_data="return_to_main_menu")]
            ])
        )
        return ConversationHandler.END



# –°–ü–ò–°–û–ö –í–°–ï–• –î–û–†–ê–ú
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def initialize_page(context, key):
    if key not in context.user_data:
        context.user_data[key] = 0

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
# –ú–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–æ—Ä–∞–º
async def list_doramas_menu(update, context):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üî† –ü–æ –∞–ª—Ñ–∞–≤–∏—Ç—É", callback_data="list_by_letter")],
        [InlineKeyboardButton("‚≠ê –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É", callback_data="list_doramas_by_rating")],
        [InlineKeyboardButton("üìÖ –ü–æ–∏—Å–∫ –ø–æ –≥–æ–¥—É", callback_data="list_years")],
        [InlineKeyboardButton("üå∏ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main_menu")],
    ]
    
    try:

    
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))

    
    except telegram.error.BadRequest as e:

    
        if 'Message is not modified' not in str(e):

    
            raise

# ========  –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Ä–∞–º ======== 
async def get_total_doramas_count():
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT COUNT(*) FROM doramas") as cursor:
            return (await cursor.fetchone())[0]

# ========  –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ ======== 
async def handle_language_choice(update, context): 
    query = update.callback_query
    await query.answer()
    
    if query.data == "language_ru":
        context.user_data["language"] = "ru"
    elif query.data == "language_en":
        context.user_data["language"] = "en"
        
    context.user_data["language"] = "ru" if query.data == "language_ru" else "en"
    await list_doramas_by_letter(update, context)

# ========  –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ ======== 
async def choose_language(update, context):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="language_ru")],
        [InlineKeyboardButton("üá¨üáß English", callback_data="language_en")],
        [InlineKeyboardButton("üå∏ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main_menu")]
    ]
    try:

        await query.edit_message_text("*–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:*", parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))

    except telegram.error.BadRequest as e:

        if 'Message is not modified' not in str(e):

            raise
    
# ========   –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±—É–∫–≤ –¥–æ—Ä–∞–º ======== 
async def list_doramas_by_letter(update, context):
    query = update.callback_query
    await query.answer()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    initialize_page(context, "letter_page")

    language = context.user_data.get("language", "ru")
    column = "title_ru" if language == "ru" else "title_en"
    prompt = "*–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –Ω–∞–∑–≤–∞–Ω–∏—è: üá∑üá∫*" if language == "ru" else "*–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –Ω–∞–∑–≤–∞–Ω–∏—è: üá¨üáß*"
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—É–∫–≤
        async with db.execute(f"SELECT DISTINCT substr({column}, 1, 1) FROM doramas WHERE {column} IS NOT NULL") as cursor:
            available_letters = [row[0] for row in await cursor.fetchall()]

    # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    available_letters = list(set(letter.upper() for letter in available_letters if letter.strip()))

    if language == "ru":
        russian_alphabet = "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"
        letters = sorted([letter for letter in available_letters if letter in russian_alphabet])
        non_letters = sorted([letter for letter in available_letters if letter not in russian_alphabet])
    else:
        letters = sorted([letter for letter in available_letters if letter.isalpha()])
        non_letters = sorted([letter for letter in available_letters if not letter.isalpha()])

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å 5 –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –∫–∞–∂–¥–æ–º —Ä—è–¥—É
    letter_rows = [letters[i:i + 5] for i in range(0, len(letters), 5)]
    non_letter_rows = [non_letters[i:i + 5] for i in range(0, len(non_letters), 5)]

    keyboard = (
        [[InlineKeyboardButton(letter, callback_data=f"filter_by_letter_{letter}") for letter in row] for row in letter_rows] 
        + [[InlineKeyboardButton(letter, callback_data=f"filter_by_letter_{letter}") for letter in row] for row in non_letter_rows]
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton("üå∏ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main_menu")])

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    total_doramas = await get_total_doramas_count()
    try:

        await query.edit_message_text(f"*{prompt}*\n–í—Å–µ–≥–æ –¥–æ—Ä–∞–º: {total_doramas}", parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))

    except telegram.error.BadRequest as e:

        if 'Message is not modified' not in str(e):

            raise


# ========  –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Ä–∞–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±—É–∫–≤–µ ========
async def show_doramas_by_letter(update, context):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±—É–∫–≤—ã
    if query.data.startswith("filter_by_letter_"):
        letter = query.data.split("_")[-1]
        context.user_data["selected_letter"] = letter
    else:
        letter = context.user_data["selected_letter"]

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    column = "title_ru" if context.user_data.get("language", "ru") == "ru" else "title_en"
    
    async with aiosqlite.connect(DB_PATH) as db:
        if letter.upper() in ['T', 'A']:
            async with db.execute(f"""
                SELECT id, {column}, country 
                FROM doramas 
                WHERE 
                    ({column} LIKE ? AND {column} NOT LIKE 'The %' AND {column} NOT LIKE 'A %') 
                    OR 
                    ({column} LIKE 'The %' AND SUBSTR({column}, 5, 1) = ?) 
                    OR 
                    ({column} LIKE 'A %' AND SUBSTR({column}, 2, 1) = ?)
                ORDER BY {column}
            """, (letter + "%", letter.upper(), letter.upper())) as cursor:
                rows = await cursor.fetchall()
        else:
            async with db.execute(f"""
                SELECT id, {column}, country 
                FROM doramas 
                WHERE 
                    ({column} LIKE ?) 
                    OR 
                    ({column} LIKE 'The %' AND SUBSTR({column}, 5, 1) = ?) 
                    OR 
                    ({column} LIKE 'A %' AND SUBSTR({column}, 2, 1) = ?)
                ORDER BY {column}
            """, (letter + "%", letter.upper(), letter.upper())) as cursor:
                rows = await cursor.fetchall()

    if not rows:
        try:

            await query.edit_message_text(f"–ù–µ—Ç –¥–æ—Ä–∞–º, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è –Ω–∞ {letter}.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_doramas_by_letter")]]))

        except telegram.error.BadRequest as e:

            if 'Message is not modified' not in str(e):

                raise
        return


    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–æ—Ä–∞–º –ø–æ –±—É–∫–≤–µ
    initialize_page(context, "letter_doramas_page")

    start, end = context.user_data["letter_doramas_page"] * PAGE_SIZE, (context.user_data["letter_doramas_page"] + 1) * PAGE_SIZE
    rows_to_show = rows[start:end]

    keyboard = [
        [InlineKeyboardButton(f"{row[1]} {COUNTRY_FLAGS.get(row[2], 'üåç')}", callback_data=f"show_dorama:{row[0]}")] 
        for row in rows_to_show
    ]

    pagination_buttons = []
    if context.user_data["letter_doramas_page"] > 0:
        pagination_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="letter_doramas_page_back"))
    if len(rows) > (context.user_data["letter_doramas_page"] + 1) * PAGE_SIZE:
        pagination_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data="letter_doramas_page_next"))

    if pagination_buttons:
        pagination_buttons = [pagination_buttons]
    else:
        pagination_buttons = []
    

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.extend(pagination_buttons)
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_doramas_by_letter")])

    try:


        await query.edit_message_text(f"–î–æ—Ä–∞–º—ã –Ω–∞ –±—É–∫–≤—É {letter} (–í—Å–µ–≥–æ: {len(rows)}):", reply_markup=InlineKeyboardMarkup(keyboard))


    except telegram.error.BadRequest as e:


        if 'Message is not modified' not in str(e):


            raise

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–æ—Ä–∞–º –ø–æ –±—É–∫–≤–µ
async def handle_letter_doramas_pagination(update, context):
    query = update.callback_query
    await query.answer()

    page_change = -1 if query.data == "letter_doramas_page_back" else 1
    context.user_data["letter_doramas_page"] = max(0, context.user_data["letter_doramas_page"] + page_change)

    await show_doramas_by_letter(update, context)


# ========  –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Ä–∞–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É ========== 
async def list_doramas_by_rating(update, context):
    query = update.callback_query
    await query.answer()

    initialize_page(context, "rating_page")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT DISTINCT personal_rating FROM doramas ORDER BY personal_rating DESC") as cursor:
        
            rows = await cursor.fetchall()
            
    ratings = [str(row[0]) for row in rows if row[0] is not None]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥–æ—á–∫—É –∫ –∫–∞–∂–¥–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É
    keyboard = [
        [InlineKeyboardButton(f"‚≠ê {rating}", callback_data=f"filter_by_rating_{rating}")]
        for rating in ratings
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    keyboard.append([InlineKeyboardButton("üå∏ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main_menu")])
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    total_doramas = await get_total_doramas_count()
    try:

        await query.edit_message_text(f"*–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É* (–í—Å–µ–≥–æ –¥–æ—Ä–∞–º: {total_doramas}):", parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))

    except telegram.error.BadRequest as e:

        if 'Message is not modified' not in str(e):

            raise


# ======== –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Ä–∞–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É  ========== 
async def show_doramas_by_rating(update, context):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
    if query.data.startswith("filter_by_rating_"):
        rating = query.data.split("_")[-1]
        context.user_data["selected_rating"] = rating
    else:
        rating = context.user_data["selected_rating"]

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Ä–∞–º —Å —ç—Ç–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT COUNT(*) FROM doramas WHERE personal_rating = ?", (rating,)) as cursor:
            count_row = await cursor.fetchone()
            count = count_row[0] if count_row else 0

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Ä–∞–º—ã —Å —ç—Ç–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT id, title_ru, country FROM doramas WHERE personal_rating = ? ORDER BY title_ru", (rating,)) as cursor:
            rows = await cursor.fetchall()
            
    if not rows:
        await query.edit_message_text(f"–ù–µ—Ç –¥–æ—Ä–∞–º —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º {rating}.", 
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_doramas_by_rating")]]))
        return            

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–æ—Ä–∞–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    initialize_page(context, "rating_doramas_page")

    start, end = context.user_data["rating_doramas_page"] * PAGE_SIZE, (context.user_data["rating_doramas_page"] + 1) * PAGE_SIZE
    rows_to_show = rows[start:end]
    
    keyboard = [
        [InlineKeyboardButton(f"{row[1]} {COUNTRY_FLAGS.get(row[2], 'üåç')}", callback_data=f"show_dorama:{row[0]}")] 
        for row in rows_to_show
    ]

    pagination_buttons = []
    if context.user_data["rating_doramas_page"] > 0:
        pagination_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="rating_doramas_page_back"))
    if len(rows) > (context.user_data["rating_doramas_page"] + 1) * PAGE_SIZE:
        pagination_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data="rating_doramas_page_next"))

    if pagination_buttons:
        pagination_buttons = [pagination_buttons]
    else:
        pagination_buttons = []
        
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.extend(pagination_buttons)
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_doramas_by_rating")])

    try:


        await query.edit_message_text(f"–î–æ—Ä–∞–º—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º {rating} (–í—Å–µ–≥–æ: {len(rows)}):", reply_markup=InlineKeyboardMarkup(keyboard))


    except telegram.error.BadRequest as e:


        if 'Message is not modified' not in str(e):


            raise

# ======== –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–æ—Ä–∞–º  ========== 
async def handle_rating_doramas_pagination(update, context):
    query = update.callback_query
    await query.answer()

    page_change = -1 if query.data == "rating_doramas_page_back" else 1
    context.user_data["rating_doramas_page"] = max(0, context.user_data["rating_doramas_page"] + page_change)

    await show_doramas_by_rating(update, context)


# ======== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ==========
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–∑–≤–∞–Ω.")
    
    await log_user_activity(update, context)
    logger.info("–§—É–Ω–∫—Ü–∏—è log_user_activity –≤—ã–∑–≤–∞–Ω–∞.")  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –ª–æ–≥

    if update.effective_message.text:
        await update.message.reply_text(DEFAULT_MESSAGE, reply_markup=back_button)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤–≤–µ–ª —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        
        

    
# ======== –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Callback-–∑–∞–ø—Ä–æ—Å–æ–≤ ==========
async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data:
        user = update.effective_user
        if user:
            user_id = user.id
            button_text = query.data
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è callback_data: {button_text} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        if query.data == "list_by_letter":
            await log_user_activity(update, context)  # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await choose_language(update, context)

        elif query.data in ["language_ru", "language_en"]:
            await log_user_activity(update, context)  # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data["language"] = query.data.split("_")[1]
            await list_doramas_by_letter(update, context)

        elif query.data == "list_doramas_by_letter":
            await log_user_activity(update, context)  # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await list_doramas_by_letter(update, context)

        elif query.data.startswith("filter_by_letter_"):
            await log_user_activity(update, context)  # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data["selected_letter"] = query.data.split("_")[-1]
            await show_doramas_by_letter(update, context)

        elif query.data.startswith("filter_by_rating_"):
            await log_user_activity(update, context)  # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await show_doramas_by_rating(update, context)

        elif query.data in ["rating_doramas_page_back", "rating_doramas_page_next"]:
            await log_user_activity(update, context)  # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await handle_rating_doramas_pagination(update, context)

        elif query.data.startswith("show_dorama:"):
            await log_user_activity(update, context)  # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            dorama_id = query.data.split(":")[1]
            await show_dorama_details(update, context, dorama_id)

        elif query.data == "return_to_main_menu":
            await log_user_activity(update, context)  # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await list_doramas_menu(update, context)

        elif query.data in ["letter_doramas_page_back", "letter_doramas_page_next"]:
            await log_user_activity(update, context)  # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await handle_letter_doramas_pagination(update, context)

        elif query.data.startswith("select_country:"):
            await log_user_activity(update, context)  # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            country = query.data.split(":")[1]
            logger.info(f"–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞: {country}")
            await show_doramas_by_country(update, context, country)

        elif query.data == "search_by_actor":
            logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–∞–∫—Ç–µ—Ä'")
            await log_user_activity(update, context)  # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ –∏–º—è –∞–∫—Ç–µ—Ä–∞:")

        elif query.data == "search_by_actress":
            logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–∞–∫—Ç—Ä–∏—Å–∞'")
            await log_user_activity(update, context)  # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ –∏–º—è –∞–∫—Ç—Ä–∏—Å—ã:")

        elif query.data == "search_by_director":
            logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '—Ä–µ–∂–∏—Å—Å–µ—Ä'")
            await log_user_activity(update, context)  # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ –∏–º—è —Ä–µ–∂–∏—Å—Å—ë—Ä–∞:")

        elif query.data == "back":
            logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥")
            await log_user_activity(update, context)  # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await update.callback_query.answer()
            await update.callback_query.edit_message_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥.")

        else:  
            await log_user_activity(update, context)  # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await query.edit_message_text(
                text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", 
                reply_markup=query.message.reply_markup
            )

    else:  # –ï—Å–ª–∏ callback_data –ø—É—Å—Ç–æ–π
        logger.warning("‚ö†Ô∏è callback_data –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω!")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –°–ü–ò–°–û–ö –í–°–ï–• –î–û–†–ê–ú –ü–û –ì–û–î–£
# ======== –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ ========== 
async def list_years(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        data_parts = query.data.split(":")
        if len(data_parts) > 1:
            page = int(data_parts[-1])  # –°—Ç—Ä–∞–Ω–∏—Ü–∞
        else:
            page = 0  # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        async with aiosqlite.connect(DB_PATH) as db:
            async with db.execute("SELECT COUNT(DISTINCT year) FROM doramas") as cursor:
                total_years = (await cursor.fetchone())[0]
                
            if total_years is None:
                total_years = 0  # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç

            # –ü–æ–¥—Å—á—ë—Ç —Å—Ç—Ä–∞–Ω–∏—Ü
            max_pages = (total_years + PAGE_SIZE - 1) // PAGE_SIZE
            page = min(page, max_pages - 1)  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
            offset = page * PAGE_SIZE


            async with db.execute(
                "SELECT DISTINCT year FROM doramas ORDER BY year DESC LIMIT ? OFFSET ?",
                (PAGE_SIZE, offset)
            ) as cursor:
                years = await cursor.fetchall()

        if not years:
            try:

                await query.edit_message_text("üö´ –ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –≥–æ–¥–æ–≤.", reply_markup=back_button)

            except telegram.error.BadRequest as e:

                if 'Message is not modified' not in str(e):

                    raise
            return

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ–¥–∞
        keyboard = []
        for year in years:
            keyboard.append([InlineKeyboardButton(str(year[0]), callback_data=f"list_doramas_year_{year[0]}")])

        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_keyboard = create_pagination_buttons("list_years", page, total_years)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        keyboard.extend(pagination_keyboard.inline_keyboard)

        try:
            reply_markup = InlineKeyboardMarkup(keyboard)
            try:

                await query.edit_message_text("üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:*", reply_markup=reply_markup, parse_mode="Markdown")

            except telegram.error.BadRequest as e:

                if 'Message is not modified' not in str(e):

                    raise
        except BadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            if "message is not modified" in str(e):
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ.")
            else:
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
                logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ", exc_info=True)
    
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        try:

            await query.edit_message_text("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–æ–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

        except telegram.error.BadRequest as e:

            if 'Message is not modified' not in str(e):

                raise
            
# ======== –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Ä–∞–º –ø–æ –≥–æ–¥—É ========== 
async def list_doramas_by_year(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        data_parts = query.data.split("_")
        if len(data_parts) < 4:
            try:

                await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", reply_markup=back_button)

            except telegram.error.BadRequest as e:

                if 'Message is not modified' not in str(e):

                    raise
            return
        
        year = data_parts[3]  # –ì–æ–¥ ‚Äî —á–µ—Ç–≤—ë—Ä—Ç—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ data_parts
        page = int(data_parts[4]) if len(data_parts) > 4 else 0  # –°—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äî –ø—è—Ç—ã–π —ç–ª–µ–º–µ–Ω—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)

        if not year.isdigit():
            try:

                await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", reply_markup=back_button)

            except telegram.error.BadRequest as e:

                if 'Message is not modified' not in str(e):

                    raise
            return
        
        year = int(year)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with aiosqlite.connect(DB_PATH) as db:
            async with db.execute("SELECT COUNT(*) FROM doramas WHERE year = ?", (year,)) as cursor:
                total_doramas = (await cursor.fetchone())[0]

            if total_doramas == 0:
                try:

                    await query.edit_message_text(f"üö´ –í {year} –≥–æ–¥—É –¥–æ—Ä–∞–º –Ω–µ—Ç.", reply_markup=back_button)

                except telegram.error.BadRequest as e:

                    if 'Message is not modified' not in str(e):

                        raise
                return

            # –ü–æ–¥—Å—á—ë—Ç —Å—Ç—Ä–∞–Ω–∏—Ü
            total_pages = (total_doramas // PAGE_SIZE) + (1 if total_doramas % PAGE_SIZE else 0)
            offset = page * PAGE_SIZE

            # –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –¥–æ—Ä–∞–º —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            async with db.execute(
                "SELECT id, title_ru, country FROM doramas WHERE year = ? ORDER BY title_ru LIMIT ? OFFSET ?",
                (year, PAGE_SIZE, offset)
            ) as cursor:
                doramas = await cursor.fetchall()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        response = f"üìÖ *–î–æ—Ä–∞–º—ã {year} –≥–æ–¥–∞ ({total_doramas} –≤—Å–µ–≥–æ):*\n\n"
        response += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n\n"

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        pagination_keyboard = create_pagination_buttons(None, page, total_doramas, year=year)
        
        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ —Å –¥–æ—Ä–∞–º–∞–º–∏
        keyboard = []
        for dorama_id, title, country in doramas:
            country_flag = COUNTRY_FLAGS.get(country, "üåç")  # –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã –∏–ª–∏ —Å—Ç–∞–≤–∏–º üåç
            title = escape_markdown(prevent_hashtag_linking(title))  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
            keyboard.append([InlineKeyboardButton(f"{title} {country_flag} ", callback_data=f"show_dorama:{dorama_id}")])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        keyboard.extend(pagination_keyboard.inline_keyboard)
            
        # –ö–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.append([InlineKeyboardButton("üìÖ –°–ø–∏—Å–æ–∫ –ø–æ –≥–æ–¥–∞–º", callback_data="list_years")])
        keyboard.append([InlineKeyboardButton("üå∏ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main_menu")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        try:

            await query.edit_message_text(response, reply_markup=reply_markup, parse_mode="Markdown")

        except telegram.error.BadRequest as e:

            if 'Message is not modified' not in str(e):

                raise

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ—Ä–∞–º –∑–∞ {year}: {e}")
        try:

            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Ä–∞–º.", reply_markup=back_button)

        except telegram.error.BadRequest as e:

            if 'Message is not modified' not in str(e):

                raise

              
# –£–ù–ò–í–ê–†–°–ê–õ–¨–ù–´–ô –•–≠–ù–î–õ–ï–† –ü–ê–ì–ò–ù–ê–¶–ò–ò        
# ========  –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏  ==========
def create_pagination_buttons(prefix, page, total_results, year=None):
    max_pages = (total_results + PAGE_SIZE - 1) // PAGE_SIZE  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü

    keyboard = []
    row = []   
    
    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
    if page > 0:
        if year:
            row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"list_doramas_year_{year}_{page - 1}"))            
        elif prefix == "list_years":
            row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{prefix}:{page - 1}"))
        else:
            row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{prefix}:{page - 1}"))
    
    # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è"
    if (page + 1) * PAGE_SIZE < total_results:
        next_page = page + 1
        if year:
            row.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"list_doramas_year_{year}_{next_page}"))
        elif prefix == "list_years":
            row.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"{prefix}:{next_page}"))
        else:
            row.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"{prefix}:{next_page}"))

    if row:
        keyboard.append(row)
        
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    if prefix == "title":
        keyboard.append([InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_title")])
        keyboard.append([InlineKeyboardButton("üå∏ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main_menu")])
        
    elif prefix == "country":
        keyboard.append([InlineKeyboardButton("üåç –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω", callback_data="search_by_country")])
        
    elif prefix == "list_years":
        keyboard.append([InlineKeyboardButton("üå∏ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main_menu")])

    return InlineKeyboardMarkup(keyboard)

        
# ========  –û–±—â–∏–π —Ö—ç–Ω–¥–ª–µ—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ ==========
async def handle_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
        logger.info(f"Received callback_data: {query.data}")
        data_parts = query.data.split(":")
        
        if len(data_parts) < 2:
            try:

                await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", reply_markup=back_button)

            except telegram.error.BadRequest as e:

                if 'Message is not modified' not in str(e):

                    raise
            return ConversationHandler.END

        prefix, page_str = data_parts[0], data_parts[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page = int(page_str)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å callback_data: {query.data} (prefix: {prefix}, page: {page})")  # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–∞
        if prefix == "country":
            country = context.user_data['country']
            total_results_country = context.user_data.get('total_results_country', 0)
            logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country}: {total_results_country}")
            return await fetch_doramas_page(update, context, country, page)
            
        elif prefix == "title":
            normalized_title = context.user_data.get('normalized_title')  
            total_results_title = context.user_data.get('total_results_title', 0)
            logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {normalized_title}: {total_results_title}")
            return await fetch_doramas_by_title_page(update, context, normalized_title, page)
            
        elif prefix == "actor":
            actor_name = context.user_data.get('search_actor_name', '')
            logger.info(f"–ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ –∞–∫—Ç—ë—Ä—É: {actor_name}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
            if not actor_name:
                logger.error("‚ùå –û—à–∏–±–∫–∞: `search_actor_name` –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ `context.user_data`!")
                try:

                    await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=back_button)

                except telegram.error.BadRequest as e:

                    if 'Message is not modified' not in str(e):

                        raise
                return ConversationHandler.END
            context.user_data['actor_page'] = page
            return await show_actors_list(update, context, actor_name, page)

        elif prefix == "actress":
            actress_name = context.user_data.get('search_actress_name', '')
            logger.info(f"–ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ –∞–∫—Ç—ë—Ä—É: {actress_name}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
            if not actress_name:
                logger.error("‚ùå –û—à–∏–±–∫–∞: `search_actress_name` –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ `context.user_data`!")
                try:

                    await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=back_button)

                except telegram.error.BadRequest as e:

                    if 'Message is not modified' not in str(e):

                        raise
                return ConversationHandler.END
            context.user_data['actress_page'] = page            
            return await show_actresses_list(update, context, actress_name, page)

        elif prefix == "director":
            director_name = context.user_data.get('search_director_name', '')
            logger.info(f"–ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ –∞–∫—Ç—ë—Ä—É: {director_name}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
            if not director_name:
                logger.error("‚ùå –û—à–∏–±–∫–∞: `search_director_name` –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ `context.user_data`!")
                try:

                    await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=back_button)

                except telegram.error.BadRequest as e:

                    if 'Message is not modified' not in str(e):

                        raise
                return ConversationHandler.END
            context.user_data['director_page'] = page            
            return await show_directors_list(update, context, director_name, page)
            
      # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        elif "list_doramas_year" in query.data:
            data_parts = query.data.split("_")
            if len(data_parts) < 5 or not data_parts[4].isdigit():
                try:

                    await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", reply_markup=back_button)

                except telegram.error.BadRequest as e:

                    if 'Message is not modified' not in str(e):

                        raise
                return ConversationHandler.END

            year = data_parts[3]  # –ì–æ–¥
            page = int(data_parts[4])  # –°—Ç—Ä–∞–Ω–∏—Ü–∞

            context.user_data['current_page'] = page

            await list_doramas_by_year(update, context)
            return

        elif query.data == "list_years" or "list_years:" in query.data:
            data_parts = query.data.split(":")
            if len(data_parts) > 1:
                page = int(data_parts[-1])  # –°—Ç—Ä–∞–Ω–∏—Ü–∞
            else:
                page = 0  # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            await list_years(update, context)
            return
        
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–∞
        if prefix == "list_by_letter":
            context.user_data['page'] = page
            await list_doramas_by_letter(update, context)
            return

        elif prefix == "list_by_rating":
            context.user_data['rating_page'] = page
            await list_doramas_by_rating(update, context)
            return

    except (ValueError, IndexError) as ve:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {ve}")
        try:

            await query.edit_message_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {ve}", reply_markup=back_button)

        except telegram.error.BadRequest as e:

            if 'Message is not modified' not in str(e):

                raise
        return ConversationHandler.END

# ========   –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥  ==========
async def handle_button_press(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("üßê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")  

# ======== –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ==========
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.effective_message.reply_text("üòî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –í–≤–æ–¥ –∫–æ–º–∞–Ω–¥ —Å–ª–æ–≤–∞–º–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.", reply_markup=back_button)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤–≤–µ–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É.")

# ======== –•—ç–Ω–¥–ª–µ—Ä –æ—à–∏–±–æ–∫ ==========
async def error_handler(update: object | None, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update is not None and context.error is not None:
        logger.error(msg="Exception while handling an update:", exc_info=context.error)

        # Traceback –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        tb_list = traceback.format_exception(None, context.error, context.error.__traceback__)
        tb_string = ''.join(tb_list)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        error_message = (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n"
            f"<pre>update = {str(update)}</pre>\n"
            f"<pre>context.chat_data = {str(context.chat_data)}</pre>\n"
            f"<pre>context.user_data = {str(context.user_data)}</pre>\n"
            f"<pre>{tb_string}</pre>"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("üå∏ –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="return_to_main_menu")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        for admin_id in ADMINS:
            try:
                await context.bot.send_message(chat_id=admin_id, text=error_message)
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å ID {admin_id}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å ID {admin_id}: {e}")


# ======== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ==========
async def init_user_db():
    async with aiosqlite.connect(DB_PATH_2) as db:
        await db.executescript('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_seen TEXT DEFAULT CURRENT_TIMESTAMP,
                last_seen TEXT DEFAULT NULL,
                last_message TEXT DEFAULT NULL,
                last_callback_data TEXT DEFAULT NULL
            );
            CREATE TABLE IF NOT EXISTS user_actions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                action_type TEXT, 
                action_data TEXT, 
                message_id INTEGER, 
                callback_query_id TEXT,
                timestamp TEXT DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
            );
            CREATE INDEX IF NOT EXISTS idx_user_actions_user_id ON user_actions (user_id);
        ''')
        await db.commit()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

# ======== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ==========
async def log_user_activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.effective_user
    if not user:
        logger.warning("‚ö†Ô∏è –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ update.")
        return
    
    user_id = user.id
    username = user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    action_type = None
    action_data = None
    message_id = None
    callback_query_id = None

    if update.message:
        message_id = update.message.message_id
        if update.message.text:
            if update.message.text.startswith('/'):
                action_type = "command"
                action_data = update.message.text
            else:
                action_type = "message"
                action_data = update.message.text
    elif update.callback_query:
        callback_query_id = update.callback_query.id
        action_type = "callback"
        action_data = update.callback_query.data

    if not action_type:
        return
    
    try:
        async with aiosqlite.connect(DB_PATH_2) as db:
            # –ó–∞–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É user_actions
            await db.execute("""
                INSERT INTO user_actions (user_id, action_type, action_data, message_id, callback_query_id, timestamp)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (user_id, action_type, action_data, message_id, callback_query_id, now))
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ users
            await db.execute("""
                INSERT INTO users (user_id, username, first_seen, last_seen, last_message, last_callback_data)
                VALUES (?, ?, ?, ?, ?, ?)
                ON CONFLICT(user_id) DO UPDATE SET
                    username = excluded.username,
                    last_seen = excluded.last_seen,
                    last_message = excluded.last_message,
                    last_callback_data = excluded.last_callback_data;
            """, (user_id, username, now, now,
                  action_data if action_type == "message" else None,
                  action_data if action_type == "callback" else None))
            
            await db.commit()
            
        logger.info(f"üíæ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: {action_type}, –î–∞–Ω–Ω—ã–µ: {action_data}")

    except aiosqlite.Error as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)

async def update_last_actions(db: aiosqlite.Connection, user_id: int, action_type: str, action_data: str, message_id: int, callback_query_id: str, timestamp: str) -> None:
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É user_actions."""
    try:
        sql_query = """
            INSERT INTO user_actions (user_id, action_type, action_data, message_id, callback_query_id, timestamp)
            VALUES (?, ?, ?, ?, ?, ?)
        """
        log_data = (user_id, action_type, action_data, message_id, callback_query_id, timestamp)
        logger.info(f"SQL-–∑–∞–ø—Ä–æ—Å: {sql_query}, –î–∞–Ω–Ω—ã–µ: {log_data}")  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –ª–æ–≥
        await db.execute(sql_query, log_data)
        logger.info(f"‚úÖ {timestamp} –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–ø–∏—Å–∞–Ω–æ: {action_type} - {action_data}")
    except aiosqlite.Error as e:
        logger.error(f"‚ö†Ô∏è {timestamp} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)

# ======== –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ==========
async def get_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        async with aiosqlite.connect(DB_PATH_2) as db:
            async with db.execute("""
                SELECT u.user_id, u.username, u.first_seen, u.last_seen
                FROM users u
            """) as cursor:
                users = await cursor.fetchall()

        if not users:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return

        user_info = "\n".join([
            f"üÜî {u[0]} | üë§ {u[1]} | üïì {u[2]} | ‚è≥ {u[3]}"
            for u in users
        ])
        
        safe_user_info = escape_markdown_v2(user_info)
        await update.message.reply_text(f"üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n{safe_user_info}", parse_mode='MarkdownV2')

    except aiosqlite.Error as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", exc_info=True)

# ======== –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π ==========
async def get_user_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user:
        return
    
    user_id = user.id
    try:
        async with aiosqlite.connect(DB_PATH_2) as db:
            sql_query = "SELECT action_type, action_data, timestamp FROM user_actions WHERE user_id = ? ORDER BY timestamp DESC LIMIT 10"
            logger.info(f"–í—ã–ø–æ–ª–Ω—è–µ–º—ã–π SQL-–∑–∞–ø—Ä–æ—Å: {sql_query}, user_id: {user_id}")  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –ª–æ–≥
            async with db.execute(sql_query, (user_id,)) as cursor:
                actions = await cursor.fetchall()
        
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞: {actions}")  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –ª–æ–≥

        if not actions:
            await send_reply(update, "üì≠ –ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.")
            return
        
        actions_text = "\n".join([f"{a[2]} - {a[0]}: {a[1]}" for a in actions])
        await send_reply(update, f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:\n{actions_text}")

    except aiosqlite.Error as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)


    
# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Ä–∞–º–µ –ø–æ ID
get_dorama_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(get_dorama_details, pattern="^get_dorama_details$")],
    states={
        GETTING_DORAMA_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_dorama_id)],
    },
    fallbacks=[
        CallbackQueryHandler(cancel, pattern="^cancel$"),
        CallbackQueryHandler(handle_back_to_menu, pattern="^return_to_main_menu$"),
    ],
    name="get_dorama",
)        
        
# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–µ
search_country_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(search_by_country, pattern="^search_by_country$")],
    states={
        SEARCH_COUNTRY: [
            CallbackQueryHandler(handle_search_by_country, pattern="^select_country:.*$"),
            CallbackQueryHandler(handle_pagination, pattern="country:"),
            CallbackQueryHandler(handle_pagination, pattern="country_page:") ,
        ],
        HANDLE_PAGINATION: [
            CallbackQueryHandler(search_by_country, pattern="^search_by_country$"),
            CallbackQueryHandler(handle_back_to_menu, pattern="^return_to_main_menu$"),
            CallbackQueryHandler(cancel, pattern="^cancel$"),
            
        ],
    },
    fallbacks=[
        CallbackQueryHandler(cancel, pattern="^cancel$"),
        CallbackQueryHandler(handle_back_to_menu, pattern="^return_to_main_menu$"),
    ],
    name="search_by_country",
)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
search_title_handler = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(start_search_by_title, pattern="^search_by_title$"),
        CommandHandler("search_by_title", start_search_by_title),  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã         
    ],
    states={
        SEARCH_TITLE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_search_by_title),
        ],
        HANDLE_PAGINATION: [
            CallbackQueryHandler(handle_pagination, pattern=r"^title:\d+$"),
            CallbackQueryHandler(start_search_by_title, pattern="^search_by_title$"), 
            CallbackQueryHandler(handle_back_to_menu, pattern="^return_to_main_menu$"),
        ],
    },
    fallbacks=[
        CallbackQueryHandler(cancel, pattern="^cancel$"),
        CallbackQueryHandler(handle_back_to_menu, pattern="^return_to_main_menu$"),
    ],
    name="search_by_title",
)

# –•—ç–Ω–¥–ª–µ—Ä –ø–æ–∏—Å–∫–∞ –ø–æ –∞–∫—Ç–µ—Ä—É
search_actor_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(search_by_actor, pattern="^search_by_actor$")],
    states={
        SEARCH_ACTOR: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_search_by_actor),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message),
            CallbackQueryHandler(handle_pagination, pattern="^actor:\d+$")
        ],
        CHOOSE_ACTOR: [CallbackQueryHandler(handle_choose_actor, pattern="^choose_actor:.*$")],
    },
    fallbacks=[
        CallbackQueryHandler(handle_back_to_menu, pattern="^return_to_main_menu$"), 
        CallbackQueryHandler(cancel, pattern="^cancel$")
    ],
    name="search_by_actor",
)


# –•—ç–Ω–¥–ª–µ—Ä –ø–æ–∏—Å–∫–∞ –ø–æ –∞–∫—Ç—Ä–∏—Å–µ
search_actress_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(search_by_actress, pattern="^search_by_actress$")],
    states={
        SEARCH_ACTRESS: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_search_by_actress),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message),
            CallbackQueryHandler(handle_pagination, pattern="^actress:\d+$")
        ],
        CHOOSE_ACTRESS: [CallbackQueryHandler(handle_choose_actress, pattern="^choose_actress:.*$")],
    },
    fallbacks=[
        CallbackQueryHandler(handle_back_to_menu, pattern="^return_to_main_menu$"), 
        CallbackQueryHandler(cancel, pattern="^cancel$"),
    ],
    name="search_by_actress",
)

# –•—ç–Ω–¥–ª–µ—Ä –ø–æ–∏—Å–∫–∞ –ø–æ —Ä–µ–∂–∏—Å—Å–µ—Ä—É
search_director_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(search_by_director, pattern="^search_by_director$")],
    states={
        SEARCH_DIRECTOR: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_search_by_director),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message),
            CallbackQueryHandler(handle_pagination, pattern="^director:\d+$")
        ],
        CHOOSE_DIRECTOR: [CallbackQueryHandler(handle_choose_director, pattern=r"^choose_director:.*$")],
    },
    fallbacks=[
        CallbackQueryHandler(handle_back_to_menu, pattern="^return_to_main_menu$"), 
        CallbackQueryHandler(cancel, pattern="^cancel$"),
    ],
    name="search_by_director",
)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Ä–∞–º—ã
delete_dorama_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(delete_dorama, pattern="^delete_dorama$")],
    states={
        DELETING_DORAMA: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_delete_dorama),
            CallbackQueryHandler(confirm_delete_dorama, pattern="^confirm_delete$"),
            CallbackQueryHandler(cancel, pattern="^cancel$"),  
        ],
    },
    fallbacks=[CallbackQueryHandler(cancel, pattern="^cancel$")],
    name="delete_dorama",
)
  
# –•—ç–Ω–¥–ª–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ä–∞–º—ã
add_dorama_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(add_dorama, pattern="^add_dorama$")],
    states={
        ADDING_TITLE_RU: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, receive_title_ru),
            CallbackQueryHandler(cancel, pattern="^cancel$")  
        ],  
        ADDING_TITLE_EN: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, receive_title_en),
            CallbackQueryHandler(cancel, pattern="^cancel$")  
        ],  
        ADDING_COUNTRY: [
            CallbackQueryHandler(receive_country_for_add, pattern="^select_country:"),
            CallbackQueryHandler(cancel, pattern="^cancel$")
        ], 
        ADDING_YEAR: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, receive_year),
            CallbackQueryHandler(cancel, pattern="^cancel$")  
        ],  
        ADDING_DIRECTOR: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, receive_director),
            CallbackQueryHandler(cancel, pattern="^cancel$")  
        ],  
        ADDING_LEAD_ACTRESS: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, receive_lead_actress),
            CallbackQueryHandler(cancel, pattern="^cancel$")  
        ],  
        ADDING_LEAD_ACTOR: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, receive_lead_actor),
            CallbackQueryHandler(cancel, pattern="^cancel$")  
        ],  
        ADDING_PERSONAL_RATING: [
            CallbackQueryHandler(receive_personal_rating, pattern="^rating:"),
            CallbackQueryHandler(cancel, pattern="^cancel$")  
        ],
        ADDING_COMMENT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, receive_comment),
            CallbackQueryHandler(cancel, pattern="^cancel$")  
        ],  
        ADDING_PLOT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, receive_plot),
            CallbackQueryHandler(cancel, pattern="^cancel$")  
        ],  
        ADDING_POSTER_URL: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, receive_poster_url)
        ],
    },
    fallbacks=[CallbackQueryHandler(cancel, pattern="^cancel$")],
    name="add_dorama",
)

def stop_application():
    print("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
    application.stop()
    print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, lambda sig, frame: stop_application())
signal.signal(signal.SIGTERM, lambda sig, frame: stop_application())

# ======== –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ==========
def setup_handlers(application: Application):
    
    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("restart", restart))
    application.add_handler(CommandHandler("menu", show_menu))
    application.add_handler(CommandHandler("search_by_title", start_search_by_title))
    application.add_handler(CommandHandler("users", get_users))
    application.add_handler(CommandHandler("get_user_actions", get_user_actions))
    application.add_handler(CallbackQueryHandler(show_menu, pattern="^show_menu$"))
    application.add_handler(CallbackQueryHandler(handle_back_to_menu, pattern="^return_to_main_menu$"))

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, —É–¥–∞–ª–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Ä–∞–º–∞—Ö
    application.add_handler(get_dorama_handler)  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Ä–∞–º–µ –ø–æ ID
    application.add_handler(add_dorama_handler)  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ä–∞–º—ã
    application.add_handler(delete_dorama_handler)  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Ä–∞–º—ã

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
    application.add_handler(search_country_handler)  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–µ
    application.add_handler(search_title_handler)  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    application.add_handler(search_actor_handler)  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∞–∫—Ç–µ—Ä—É
    application.add_handler(search_actress_handler)  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∞–∫—Ç—Ä–∏—Å–µ
    application.add_handler(search_director_handler)  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ä–µ–∂–∏—Å—Å–µ—Ä—É

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ –¥–æ—Ä–∞–º –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    application.add_handler(CallbackQueryHandler(list_doramas_menu, pattern="^list_doramas$"))
    application.add_handler(CallbackQueryHandler(handle_language_choice, pattern="^language_"))
    application.add_handler(CallbackQueryHandler(choose_language, pattern="^language_"))
    application.add_handler(CallbackQueryHandler(list_doramas_menu, pattern="^list_doramas_menu$"))
    application.add_handler(CallbackQueryHandler(choose_language, pattern="list_by_letter"))
    application.add_handler(CallbackQueryHandler(list_doramas_by_letter, pattern="^list_doramas_by_letter"))
    application.add_handler(CallbackQueryHandler(show_doramas_by_letter, pattern="^filter_by_letter_"))
    application.add_handler(CallbackQueryHandler(list_doramas_by_rating, pattern="^list_doramas_by_rating"))
    application.add_handler(CallbackQueryHandler(handle_letter_doramas_pagination, pattern="^letter_doramas_page_"))
    application.add_handler(CallbackQueryHandler(list_years, pattern="^list_years:[0-9]+$"))
    application.add_handler(CallbackQueryHandler(list_years, pattern="^list_years$"))
    application.add_handler(CallbackQueryHandler(list_doramas_by_year, pattern="^list_doramas_year_[0-9]+_[0-9]+$"))
    application.add_handler(CallbackQueryHandler(list_doramas_by_year, pattern="^list_doramas_year_[0-9]+$"))

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–µ—Ä–æ–≤, –∞–∫—Ç—Ä–∏—Å –∏ —Ä–µ–∂–∏—Å—Å–µ—Ä–æ–≤
    application.add_handler(CallbackQueryHandler(handle_choose_actor, pattern="^choose_actor:.$"))
    application.add_handler(CallbackQueryHandler(handle_choose_actress, pattern="^choose_actress:.$"))
    application.add_handler(CallbackQueryHandler(handle_choose_director, pattern="^choose_director:.*$"))

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–µ—Ä–æ–≤, –∞–∫—Ç—Ä–∏—Å –∏ —Ä–µ–∂–∏—Å—Å–µ—Ä–æ–≤
    application.add_handler(CallbackQueryHandler(search_by_actor, pattern="^search_by_actor$"))
    application.add_handler(CallbackQueryHandler(search_by_actress, pattern="^search_by_actress$"))
    application.add_handler(CallbackQueryHandler(search_by_director, pattern="^search_by_director$"))

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    application.add_handler(CallbackQueryHandler(handle_pagination, pattern="^(country|title|actor|actress|director):\d+$"))
    application.add_handler(CallbackQueryHandler(handle_show_dorama, pattern="^show_dorama:"))
    
    #–û–ø—Ä–µ–¥–µ–ª—è–µ–º callback_handler
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text_message))
    application.add_handler(MessageHandler(filters.COMMAND, unknown))  
    application.add_error_handler(error_handler)


# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    application = Application.builder().token(TOKEN).build()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        await init_db()
        await init_user_db()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}", exc_info=True)
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î
    
    setup_handlers(application)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
        await application.run_polling()
    except RuntimeError as e:
        if "Cannot close a running event loop" in str(e):
            pass
    

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã ---
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    nest_asyncio.apply()
    asyncio.run(main())
